{
  "address": "0x499cF45AcaF043a181793e5ad4FFC2626dD354c1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "getExpirationWith",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "getSizeWith",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "getValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "getValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "matchValueToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5079721c58980d6615ecc6ad30beeaeb94660037dc826d509eae2e578b454f1f",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0x499cF45AcaF043a181793e5ad4FFC2626dD354c1",
    "transactionIndex": 0,
    "gasUsed": "658221",
    "logsBloom": "0x
    "blockHash": "0x804449c41dc7fa2edcfef426bb86417e1b070f4b8e733634def599ed2da01c3a",
    "transactionHash": "0x5079721c58980d6615ecc6ad30beeaeb94660037dc826d509eae2e578b454f1f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 29870156,
        "transactionHash": "0x5079721c58980d6615ecc6ad30beeaeb94660037dc826d509eae2e578b454f1f",
        "address": "0x499cF45AcaF043a181793e5ad4FFC2626dD354c1",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 0,
        "blockHash": "0x804449c41dc7fa2edcfef426bb86417e1b070f4b8e733634def599ed2da01c3a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29870156,
        "transactionHash": "0x5079721c58980d6615ecc6ad30beeaeb94660037dc826d509eae2e578b454f1f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000081ccb39661bc40000000000000000000000000000000000000000000000003bfac8c8015456f700000000000000000000000000000000000000000000011da7181679098c85a30000000000000000000000000000000000000000000000003bf2abfcc7ee3b3300000000000000000000000000000000000000000000011da720334442f2a167",
        "logIndex": 1,
        "blockHash": "0x804449c41dc7fa2edcfef426bb86417e1b070f4b8e733634def599ed2da01c3a"
      }
    ],
    "blockNumber": 29870156,
    "cumulativeGasUsed": "658221",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d071c3d93c47b5f9dd2906c9ca7ec79d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getExpirationWith\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"getSizeWith\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"matchValueToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alexandas\",\"details\":\"Content price adaptor contract\",\"kind\":\"dev\",\"methods\":{\"getExpirationWith(uint256,uint256)\":{\"details\":\"get content expiration\",\"params\":{\"size\":\"content size\",\"value\":\"token value in decimals(30)\"},\"returns\":{\"_0\":\"content expiration\"}},\"getSizeWith(uint256,uint256)\":{\"details\":\"get content size \",\"params\":{\"expiration\":\"content expiration\",\"value\":\"token value in decimals(30)\"},\"returns\":{\"_0\":\"size content size\"}},\"getValue(uint256,uint256)\":{\"details\":\"return cost of content with specific content size and expiration\",\"params\":{\"expiration\":\"content expiration\",\"size\":\"content size\"},\"returns\":{\"_0\":\"token value in decimals(30)\"}},\"initialize(address,uint256)\":{\"details\":\"proxy initialize function\",\"params\":{\"owner\":\"contract owner\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPrice(uint256)\":{\"details\":\"update price\",\"params\":{\"_price\":\"price\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"price\":{\"details\":\"return current price\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceAdaptor.sol\":\"PriceAdaptor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"contracts/PriceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport './interfaces/IPriceAdaptor.sol';\\n\\n/// @author Alexandas\\n/// @dev Content price adaptor contract\\ncontract PriceAdaptor is IPriceAdaptor, OwnableUpgradeable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\t/// @dev return current price\\n\\tuint256 public price;\\n\\n\\tuint8 public immutable decimals = 36;\\n\\n\\tconstructor() initializer {}\\n\\n\\t/// @dev proxy initialize function\\n\\t/// @param owner contract owner\\n\\tfunction initialize(address owner, uint256 _price) external initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t_setPrice(_price);\\n\\t}\\n\\n\\t/// @dev update price\\n\\t/// @param _price price\\n\\tfunction setPrice(uint256 _price) external onlyOwner {\\n\\t\\t_setPrice(_price);\\n\\t}\\n\\n\\tfunction _setPrice(uint256 _price) internal {\\n\\t\\tprice = _price;\\n\\t\\temit PriceUpdated(_price);\\n\\t}\\n\\n\\t/// @dev return cost of content with specific content size and expiration\\n\\t/// @param size content size\\n\\t/// @param expiration content expiration\\n\\t/// @return token value in decimals(30)\\n\\tfunction getValue(\\n\\t\\tuint256 size,\\n\\t\\tuint256 expiration\\n\\t) public view override returns (uint256) {\\n\\t\\trequire(size > 0 || expiration > 0, 'PriceAdaptor: invalid params');\\n\\t\\treturn price.mul(size).mul(expiration);\\n\\t}\\n\\n\\t/// @dev get content size \\n\\t/// @param value token value in decimals(30)\\n\\t/// @param expiration content expiration\\n\\t/// @return size content size\\n\\tfunction getSizeWith(\\n\\t\\tuint256 value,\\n\\t\\tuint256 expiration\\n\\t) public view override returns (uint256) {\\n\\t\\treturn value.div(expiration).div(price);\\n\\t}\\n\\n\\t/// @dev get content expiration\\n\\t/// @param value token value in decimals(30)\\n\\t/// @param size content size\\n\\t/// @return content expiration\\n\\tfunction getExpirationWith(\\n\\t\\tuint256 value,\\n\\t\\tuint256 size\\n\\t) public view override returns (uint256) {\\n\\t\\treturn value.div(size).div(price);\\n\\t}\\n\\n\\tfunction getValue(uint8 tokenDecimals, uint256 size, uint256 expiration) public view override returns(uint256 value) {\\n\\t\\tvalue = getValue(size, expiration);\\n\\t\\tvalue = matchValueToToken(tokenDecimals, value);\\n\\t}\\n\\n\\tfunction matchValueToToken(uint8 tokenDecimals, uint256 value) public pure override returns(uint256) {\\n\\t\\trequire(tokenDecimals > 0, 'PriceAdaptor: invalid token decimals');\\n\\t\\tif (tokenDecimals >= decimals) {\\n\\t\\t\\treturn value.mul(10 ** (tokenDecimals - decimals));\\n\\t\\t}\\n\\t\\treturn value.div(10 ** (decimals - tokenDecimals));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfc93f65563fc0305d1ce05fc583ef157b858974c7eca70b448359818c38f476b\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPriceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.4;\\n\\ninterface IPriceAdaptor {\\n\\n\\tevent PriceUpdated(uint256 _price);\\n\\n\\t/// @dev return cost of content with specific content size and expiration\\n\\t/// @param size content size\\n\\t/// @param expiration content expiration\\n\\t/// @return token value in decimals(30)\\n\\tfunction getValue(\\n\\t\\tuint256 size,\\n\\t\\tuint256 expiration\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev get amount resource with value at a specific block\\n\\t/// @param value token value in decimals(30)\\n\\t/// @param expiration content expiration\\n\\t/// @return size content size\\n\\tfunction getSizeWith(\\n\\t\\tuint256 value,\\n\\t\\tuint256 expiration\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev get amount resource with value at a specific block\\n\\t/// @param value token value in decimals(30)\\n\\t/// @param size content size\\n\\t/// @return content expiration\\n\\tfunction getExpirationWith(\\n\\t\\tuint256 value,\\n\\t\\tuint256 size\\n\\t) external view returns (uint256);\\n\\n\\tfunction getValue(uint8 tokenDecimals, uint256 size, uint256 expiration) external view returns(uint256 value);\\n\\n\\tfunction matchValueToToken(uint8 tokenDecimals, uint256 value) external pure returns(uint256);\\n\\n}\",\"keccak256\":\"0xa9986628b4ab288b5ebf39621e2f8fb214987ec3bde762f1c7dc6387bd1c95fd\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a0604052602460805234801561001557600080fd5b50600054610100900460ff16158080156100365750600054600160ff909116105b80610061575061004f306100fa60201b61045b1760201c565b158015610061575060005460ff166001145b6100865760405162461bcd60e51b815260040161007d90610109565b60405180910390fd5b6000805460ff1916600117905580156100a9576000805461ff0019166101001790555b80156100f4576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906100eb9060019061017b565b60405180910390a15b50610189565b6001600160a01b03163b151590565b6020808252810161015b81602e81527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160208201526d191e481a5b9a5d1a585b1a5e995960921b604082015260600190565b92915050565b600060ff821661015b565b61017581610161565b82525050565b6020810161015b828461016c565b608051610a6c6101b86000396000818160e701528181610374015281816103a701526103ee0152610a6c6000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806391b7f5ed1161007157806391b7f5ed1461014c5780639504c0031461015f578063a035b1fe14610172578063cd6dc6871461017b578063ee0a0af61461018e578063f2fde38b146101a157600080fd5b806312bd28ef146100b957806330bf0313146100b9578063313ce567146100e25780636a19e6de14610116578063715018a6146101295780638da5cb5b14610133575b600080fd5b6100cc6100c7366004610556565b6101b4565b6040516100d9919061059b565b60405180910390f35b6101097f000000000000000000000000000000000000000000000000000000000000000081565b6040516100d991906105b2565b6100cc610124366004610556565b6101d7565b61013161022b565b005b6033546001600160a01b03166040516100d991906105da565b61013161015a3660046105e8565b61023f565b6100cc61016d36600461061d565b610253565b6100cc60655481565b610131610189366004610681565b610273565b6100cc61019c3660046106a3565b61034e565b6101316101af3660046106c5565b610424565b6065546000906101ce906101c8858561046a565b9061046a565b90505b92915050565b6000808311806101e75750600082115b61020c5760405162461bcd60e51b81526004016102039061071d565b60405180910390fd5b6101ce826102258560655461047690919063ffffffff16565b90610476565b610233610482565b61023d60006104ac565b565b610247610482565b610250816104fe565b50565b600061025f83836101d7565b905061026b848261034e565b949350505050565b600054610100900460ff16158080156102935750600054600160ff909116105b806102ad5750303b1580156102ad575060005460ff166001145b6102c95760405162461bcd60e51b81526004016102039061077b565b6000805460ff1916600117905580156102ec576000805461ff0019166101001790555b6102f5836104ac565b6102fe826104fe565b8015610349576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906103409060019061079f565b60405180910390a15b505050565b6000808360ff16116103725760405162461bcd60e51b8152600401610203906107ee565b7f000000000000000000000000000000000000000000000000000000000000000060ff168360ff16106103e5576103de6103cc7f000000000000000000000000000000000000000000000000000000000000000085610814565b6103d790600a610943565b8390610476565b90506101d1565b6101ce610412847f0000000000000000000000000000000000000000000000000000000000000000610814565b61041d90600a610943565b839061046a565b61042c610482565b6001600160a01b0381166104525760405162461bcd60e51b81526004016102039061099b565b610250816104ac565b6001600160a01b03163b151590565b60006101ce82846109c1565b60006101ce82846109d5565b6033546001600160a01b0316331461023d5760405162461bcd60e51b815260040161020390610a26565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60658190556040517f66cbca4f3c64fecf1dcb9ce094abcf7f68c3450a1d4e3a8e917dd621edb4ebe09061053390839061059b565b60405180910390a150565b805b811461025057600080fd5b80356101d18161053e565b6000806040838503121561056c5761056c600080fd5b6000610578858561054b565b92505060206105898582860161054b565b9150509250929050565b805b82525050565b602081016101d18284610593565b60ff8116610595565b602081016101d182846105a9565b60006001600160a01b0382166101d1565b610595816105c0565b602081016101d182846105d1565b6000602082840312156105fd576105fd600080fd5b600061026b848461054b565b60ff8116610540565b80356101d181610609565b60008060006060848603121561063557610635600080fd5b60006106418686610612565b93505060206106528682870161054b565b92505060406106638682870161054b565b9150509250925092565b610540816105c0565b80356101d18161066d565b6000806040838503121561069757610697600080fd5b60006105788585610676565b600080604083850312156106b9576106b9600080fd5b60006105788585610612565b6000602082840312156106da576106da600080fd5b600061026b8484610676565b601c81526000602082017f507269636541646170746f723a20696e76616c696420706172616d7300000000815291505b5060200190565b602080825281016101d1816106e6565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291505b5060400190565b602080825281016101d18161072d565b600060ff82166101d1565b6105958161078b565b602081016101d18284610796565b602481526000602082017f507269636541646170746f723a20696e76616c696420746f6b656e20646563698152636d616c7360e01b60208201529150610774565b602080825281016101d1816107ad565b634e487b7160e01b600052601160045260246000fd5b60ff918216911660008282101561082d5761082d6107fe565b500390565b80825b600185111561087157808604811115610850576108506107fe565b600185161561085e57908102905b800261086a8560011c90565b9450610835565b94509492505050565b6000826108895750600161093c565b816108965750600061093c565b81600181146108ac57600281146108b6576108e3565b600191505061093c565b60ff8411156108c7576108c76107fe565b8360020a9150848211156108dd576108dd6107fe565b5061093c565b5060208310610133831016604e8410600b8410161715610916575081810a83811115610911576109116107fe565b61093c565b6109238484846001610832565b92509050818404811115610939576109396107fe565b81025b9392505050565b600060ff831692506101ce600019848461087a565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150610774565b602080825281016101d181610958565b634e487b7160e01b600052601260045260246000fd5b6000826109d0576109d06109ab565b500490565b60008160001904831182151516156109ef576109ef6107fe565b500290565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000610716565b602080825281016101d1816109f456fea26469706673582212205aa7b0f09eb4db90e52cbcc2af30f4b7d99496203f68b2ac9ca852aaa32a4db464736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806391b7f5ed1161007157806391b7f5ed1461014c5780639504c0031461015f578063a035b1fe14610172578063cd6dc6871461017b578063ee0a0af61461018e578063f2fde38b146101a157600080fd5b806312bd28ef146100b957806330bf0313146100b9578063313ce567146100e25780636a19e6de14610116578063715018a6146101295780638da5cb5b14610133575b600080fd5b6100cc6100c7366004610556565b6101b4565b6040516100d9919061059b565b60405180910390f35b6101097f000000000000000000000000000000000000000000000000000000000000000081565b6040516100d991906105b2565b6100cc610124366004610556565b6101d7565b61013161022b565b005b6033546001600160a01b03166040516100d991906105da565b61013161015a3660046105e8565b61023f565b6100cc61016d36600461061d565b610253565b6100cc60655481565b610131610189366004610681565b610273565b6100cc61019c3660046106a3565b61034e565b6101316101af3660046106c5565b610424565b6065546000906101ce906101c8858561046a565b9061046a565b90505b92915050565b6000808311806101e75750600082115b61020c5760405162461bcd60e51b81526004016102039061071d565b60405180910390fd5b6101ce826102258560655461047690919063ffffffff16565b90610476565b610233610482565b61023d60006104ac565b565b610247610482565b610250816104fe565b50565b600061025f83836101d7565b905061026b848261034e565b949350505050565b600054610100900460ff16158080156102935750600054600160ff909116105b806102ad5750303b1580156102ad575060005460ff166001145b6102c95760405162461bcd60e51b81526004016102039061077b565b6000805460ff1916600117905580156102ec576000805461ff0019166101001790555b6102f5836104ac565b6102fe826104fe565b8015610349576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906103409060019061079f565b60405180910390a15b505050565b6000808360ff16116103725760405162461bcd60e51b8152600401610203906107ee565b7f000000000000000000000000000000000000000000000000000000000000000060ff168360ff16106103e5576103de6103cc7f000000000000000000000000000000000000000000000000000000000000000085610814565b6103d790600a610943565b8390610476565b90506101d1565b6101ce610412847f0000000000000000000000000000000000000000000000000000000000000000610814565b61041d90600a610943565b839061046a565b61042c610482565b6001600160a01b0381166104525760405162461bcd60e51b81526004016102039061099b565b610250816104ac565b6001600160a01b03163b151590565b60006101ce82846109c1565b60006101ce82846109d5565b6033546001600160a01b0316331461023d5760405162461bcd60e51b815260040161020390610a26565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60658190556040517f66cbca4f3c64fecf1dcb9ce094abcf7f68c3450a1d4e3a8e917dd621edb4ebe09061053390839061059b565b60405180910390a150565b805b811461025057600080fd5b80356101d18161053e565b6000806040838503121561056c5761056c600080fd5b6000610578858561054b565b92505060206105898582860161054b565b9150509250929050565b805b82525050565b602081016101d18284610593565b60ff8116610595565b602081016101d182846105a9565b60006001600160a01b0382166101d1565b610595816105c0565b602081016101d182846105d1565b6000602082840312156105fd576105fd600080fd5b600061026b848461054b565b60ff8116610540565b80356101d181610609565b60008060006060848603121561063557610635600080fd5b60006106418686610612565b93505060206106528682870161054b565b92505060406106638682870161054b565b9150509250925092565b610540816105c0565b80356101d18161066d565b6000806040838503121561069757610697600080fd5b60006105788585610676565b600080604083850312156106b9576106b9600080fd5b60006105788585610612565b6000602082840312156106da576106da600080fd5b600061026b8484610676565b601c81526000602082017f507269636541646170746f723a20696e76616c696420706172616d7300000000815291505b5060200190565b602080825281016101d1816106e6565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291505b5060400190565b602080825281016101d18161072d565b600060ff82166101d1565b6105958161078b565b602081016101d18284610796565b602481526000602082017f507269636541646170746f723a20696e76616c696420746f6b656e20646563698152636d616c7360e01b60208201529150610774565b602080825281016101d1816107ad565b634e487b7160e01b600052601160045260246000fd5b60ff918216911660008282101561082d5761082d6107fe565b500390565b80825b600185111561087157808604811115610850576108506107fe565b600185161561085e57908102905b800261086a8560011c90565b9450610835565b94509492505050565b6000826108895750600161093c565b816108965750600061093c565b81600181146108ac57600281146108b6576108e3565b600191505061093c565b60ff8411156108c7576108c76107fe565b8360020a9150848211156108dd576108dd6107fe565b5061093c565b5060208310610133831016604e8410600b8410161715610916575081810a83811115610911576109116107fe565b61093c565b6109238484846001610832565b92509050818404811115610939576109396107fe565b81025b9392505050565b600060ff831692506101ce600019848461087a565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150610774565b602080825281016101d181610958565b634e487b7160e01b600052601260045260246000fd5b6000826109d0576109d06109ab565b500490565b60008160001904831182151516156109ef576109ef6107fe565b500290565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000610716565b602080825281016101d1816109f456fea26469706673582212205aa7b0f09eb4db90e52cbcc2af30f4b7d99496203f68b2ac9ca852aaa32a4db464736f6c63430008090033",
  "devdoc": {
    "author": "Alexandas",
    "details": "Content price adaptor contract",
    "kind": "dev",
    "methods": {
      "getExpirationWith(uint256,uint256)": {
        "details": "get content expiration",
        "params": {
          "size": "content size",
          "value": "token value in decimals(30)"
        },
        "returns": {
          "_0": "content expiration"
        }
      },
      "getSizeWith(uint256,uint256)": {
        "details": "get content size ",
        "params": {
          "expiration": "content expiration",
          "value": "token value in decimals(30)"
        },
        "returns": {
          "_0": "size content size"
        }
      },
      "getValue(uint256,uint256)": {
        "details": "return cost of content with specific content size and expiration",
        "params": {
          "expiration": "content expiration",
          "size": "content size"
        },
        "returns": {
          "_0": "token value in decimals(30)"
        }
      },
      "initialize(address,uint256)": {
        "details": "proxy initialize function",
        "params": {
          "owner": "contract owner"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPrice(uint256)": {
        "details": "update price",
        "params": {
          "_price": "price"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "price": {
        "details": "return current price"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/PriceAdaptor.sol:PriceAdaptor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/PriceAdaptor.sol:PriceAdaptor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 566,
        "contract": "contracts/PriceAdaptor.sol:PriceAdaptor",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/PriceAdaptor.sol:PriceAdaptor",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/PriceAdaptor.sol:PriceAdaptor",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 895,
        "contract": "contracts/PriceAdaptor.sol:PriceAdaptor",
        "label": "price",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}