{
  "address": "0x4b9EeC5DAAA46202b159634fF3e720ae5193365B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "AddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "Remove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RemoveToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiredAt",
          "type": "uint256"
        }
      ],
      "name": "Upset",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "expiredAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "getExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "getSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "getValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "contract IPriceAdaptor",
          "name": "_priceAdaptor",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "insert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "contentIds",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "expirations",
          "type": "uint256[]"
        }
      ],
      "name": "insertMult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "isExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "metas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceAdaptor",
      "outputs": [
        {
          "internalType": "contract IPriceAdaptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "contentIds",
          "type": "string[]"
        }
      ],
      "name": "removeMult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "renew",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tokenExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa89b18b6f5fd6ee598068b16735635a872c5dbfaea89a54587607b00ecf805db",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0x4b9EeC5DAAA46202b159634fF3e720ae5193365B",
    "transactionIndex": 0,
    "gasUsed": "1582000",
    "logsBloom": "0x
    "blockHash": "0xdf8e929694c4673494b97f256b3b2573d96b6ac776294ac40914da2dbacf5410",
    "transactionHash": "0xa89b18b6f5fd6ee598068b16735635a872c5dbfaea89a54587607b00ecf805db",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 29870164,
        "transactionHash": "0xa89b18b6f5fd6ee598068b16735635a872c5dbfaea89a54587607b00ecf805db",
        "address": "0x4b9EeC5DAAA46202b159634fF3e720ae5193365B",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 0,
        "blockHash": "0xdf8e929694c4673494b97f256b3b2573d96b6ac776294ac40914da2dbacf5410"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29870164,
        "transactionHash": "0xa89b18b6f5fd6ee598068b16735635a872c5dbfaea89a54587607b00ecf805db",
        "address": "0x4b9EeC5DAAA46202b159634fF3e720ae5193365B",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 1,
        "blockHash": "0xdf8e929694c4673494b97f256b3b2573d96b6ac776294ac40914da2dbacf5410"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29870164,
        "transactionHash": "0xa89b18b6f5fd6ee598068b16735635a872c5dbfaea89a54587607b00ecf805db",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000114afc98fad2f00000000000000000000000000000000000000000000000003bea7b55df0ed2b000000000000000000000000000000000000000000000011da7e017794ae04f600000000000000000000000000000000000000000000000003bd930594613ffc000000000000000000000000000000000000000000000011da7f16275e3db2250",
        "logIndex": 2,
        "blockHash": "0xdf8e929694c4673494b97f256b3b2573d96b6ac776294ac40914da2dbacf5410"
      }
    ],
    "blockNumber": 29870164,
    "cumulativeGasUsed": "1582000",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5a73463f6c183b8de6bb23bcd07314ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RemoveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"}],\"name\":\"Upset\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"expiredAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"getExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"getSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract IPriceAdaptor\",\"name\":\"_priceAdaptor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"contentIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"expirations\",\"type\":\"uint256[]\"}],\"name\":\"insertMult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"metas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAdaptor\",\"outputs\":[{\"internalType\":\"contract IPriceAdaptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"contentIds\",\"type\":\"string[]\"}],\"name\":\"removeMult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alexandas\",\"details\":\"IPFS content id registry\",\"events\":{\"Remove(address,string)\":{\"details\":\"emit when ipfs contentId removed\",\"params\":{\"account\":\"user account\",\"contentId\":\"ipfs contentId\"}},\"Upset(address,string,uint256,uint256)\":{\"details\":\"emit when ipfs contentId inserted or updated\",\"params\":{\"account\":\"user account\",\"contentId\":\"ipfs contentId\",\"expiredAt\":\"ipfs contentId expiredAt\",\"size\":\"ipfs contentId size\"}}},\"kind\":\"dev\",\"methods\":{\"initialize(address,address,address)\":{\"details\":\"proxy initialize function\"},\"insert(address,string,uint256,uint256)\":{\"details\":\"insert ipfs contentId\",\"params\":{\"contentId\":\"ipfs contentId\",\"expiration\":\"of ipfs contentId expiration\",\"size\":\"ipfs contentId size\",\"token\":\"ERC20 token\"}},\"insertMult(address,string[],uint256[],uint256[])\":{\"details\":\"insert multiple ipfs contentId for accounts\",\"params\":{\"contentIds\":\"array of ipfs contentIds\",\"expirations\":\"array of ipfs contentId expirations\",\"sizes\":\"array of ipfs contentId size\",\"token\":\"ERC20 token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"remove(string)\":{\"details\":\"remove ipfs contentId\",\"params\":{\"contentId\":\"ipfs contentId id\"}},\"removeMult(string[])\":{\"details\":\"remove ipfs contentId\",\"params\":{\"contentIds\":\"array of ipfs contentIds\"}},\"renew(address,string,uint256)\":{\"details\":\"renew ipfs contentId\",\"params\":{\"contentId\":\"ipfs contentId\",\"expiration\":\"of ipfs contentId expiration\",\"token\":\"ERC20 token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"metas\":{\"details\":\"ipfs contentId contentId meta\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ContentIDRegistry.sol\":\"ContentIDRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"contracts/ContentIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.4;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport './PayTokens.sol';\\nimport './interfaces/IPriceAdaptor.sol';\\n\\n/// @author Alexandas\\n/// @dev IPFS content id registry\\ncontract ContentIDRegistry is PayTokens {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\tstruct ContentMeta {\\n\\t\\tuint256 size;\\n\\t\\tuint256 expiration;\\n\\t\\tuint256 createAt;\\n\\t}\\n\\n\\tIPriceAdaptor public priceAdaptor;\\n\\n\\t/// @dev ipfs contentId contentId meta\\n    mapping(address => mapping(string => ContentMeta)) public metas;\\n\\n\\t/// @dev emit when ipfs contentId inserted or updated\\n\\t/// @param account user account\\n\\t/// @param contentId ipfs contentId\\n\\t/// @param size ipfs contentId size\\n\\t/// @param expiredAt ipfs contentId expiredAt\\n\\tevent Upset(address account, string contentId, uint256 size, uint256 expiredAt);\\n\\n\\t/// @dev emit when ipfs contentId removed\\n\\t/// @param account user account\\n\\t/// @param contentId ipfs contentId\\n\\tevent Remove(address account, string contentId);\\n\\n    constructor() initializer {}\\n\\n\\t/// @dev proxy initialize function\\n\\tfunction initialize(address admin, IPriceAdaptor _priceAdaptor, IERC20 token) external initializer {\\n\\t\\tpriceAdaptor = _priceAdaptor;\\n\\t\\t__Init_Pay_Token(admin, token);\\n\\t}\\n\\n\\t/// @dev insert multiple ipfs contentId for accounts\\n\\t/// @param token ERC20 token\\n\\t/// @param contentIds array of ipfs contentIds\\n\\t/// @param sizes array of ipfs contentId size\\n    /// @param expirations array of ipfs contentId expirations\\n\\tfunction insertMult(\\n\\t\\tIERC20 token,\\n\\t\\tstring[] memory contentIds,\\n\\t\\tuint256[] memory sizes,\\n        uint256[] memory expirations\\n\\t) external {\\n\\t\\trequire(contentIds.length == sizes.length, 'ContentIDRegistry: invalid parameter length.');\\n\\t\\trequire(contentIds.length == expirations.length, 'ContentIDRegistry: invalid parameter length.');\\n\\t\\tfor (uint256 i = 0; i < contentIds.length; i++) {\\n\\t\\t\\t_insert(token, msg.sender, msg.sender, contentIds[i], sizes[i], expirations[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev insert ipfs contentId\\n\\t/// @param token ERC20 token\\n\\t/// @param contentId ipfs contentId\\n\\t/// @param size ipfs contentId size\\n    /// @param expiration of ipfs contentId expiration\\n\\tfunction insert(\\n\\t\\tIERC20 token,\\n\\t\\tstring memory contentId,\\n\\t\\tuint256 size,\\n\\t\\tuint256 expiration\\n\\t) external {\\n\\t\\t_insert(token, msg.sender, msg.sender, contentId, size, expiration);\\n\\t}\\n\\n\\tfunction _insert(\\n\\t\\tIERC20 token,\\n\\t\\taddress from,\\n\\t\\taddress account,\\n\\t\\tstring memory contentId,\\n\\t\\tuint256 size,\\n        uint256 expiration\\n\\t) internal {\\n\\t\\trequire(tokenExists(token), 'ContentIDRegistry: nonexistent token');\\n\\t\\trequire(!exists(account, contentId) || isExpired(account, contentId), 'ContentIDRegistry: contentId exists or nonexpired contentId');\\n\\t\\trequire(size > 0 || expiration > 0, 'ContentIDRegistry: invalid params');\\n\\t\\tuint256 value = getValue(token, size, expiration);\\n\\t\\ttoken.transferFrom(from, address(this), value);\\n\\t\\tmetas[account][contentId] = ContentMeta({\\n\\t\\t\\tsize: size,\\n\\t\\t\\texpiration: expiration,\\n\\t\\t\\tcreateAt: block.timestamp\\n\\t\\t});\\n\\t\\temit Upset(account, contentId, size, expiredAt(account, contentId));\\n\\t}\\n\\n\\t/// @dev renew ipfs contentId\\n\\t/// @param token ERC20 token\\n\\t/// @param contentId ipfs contentId\\n    /// @param expiration of ipfs contentId expiration\\n\\tfunction renew(\\n\\t\\tIERC20 token,\\n\\t\\tstring memory contentId,\\n        uint256 expiration\\n\\t) external {\\n\\t\\t_renew(token, msg.sender, msg.sender, contentId, expiration);\\n\\t}\\n\\n\\tfunction _renew(\\n\\t\\tIERC20 token,\\n\\t\\taddress from,\\n\\t\\taddress account,\\n\\t\\tstring memory contentId,\\n        uint256 expiration\\n\\t) internal {\\n\\t\\trequire(tokenExists(token), 'ContentIDRegistry: nonexistent token');\\n\\t\\trequire(exists(account, contentId), 'ContentIDRegistry: nonexistent contentId');\\n\\t\\trequire(!isExpired(account, contentId), 'ContentIDRegistry: ');\\n\\t\\trequire(expiration > 0, 'ContentIDRegistry: invalid params');\\n\\t\\tuint256 size = getSize(account, contentId);\\n\\t\\tuint256 value = getValue(token, size, expiration);\\n\\t\\ttoken.transferFrom(from, address(this), value);\\n\\t\\tmetas[account][contentId].expiration = expiration.add(getExpiration(account, contentId));\\n\\t\\temit Upset(account, contentId, size, expiredAt(account, contentId));\\n\\t}\\n\\n\\tfunction getSize(address account, string memory contentId) public view returns(uint256) {\\n\\t\\treturn metas[account][contentId].size;\\n\\t}\\n\\n\\tfunction getExpiration(address account, string memory contentId) public view returns(uint256) {\\n\\t\\treturn metas[account][contentId].expiration;\\n\\t}\\n\\n\\tfunction exists(address account, string memory contentId) public view returns(bool) {\\n\\t\\treturn metas[account][contentId].size > 0;\\n\\t}\\n\\n\\tfunction expiredAt(address account, string memory contentId) public view returns(uint256) {\\n\\t\\trequire(exists(account, contentId), 'ContentIDRegistry: nonexistent contentId');\\n\\t\\treturn metas[account][contentId].expiration.add(metas[account][contentId].createAt);\\n\\t}\\n\\n\\tfunction isExpired(address account, string memory contentId) public view returns(bool) {\\n\\t\\treturn expiredAt(account, contentId) < block.timestamp;\\n\\t}\\n\\n\\t/// @dev remove ipfs contentId\\n\\t/// @param contentIds array of ipfs contentIds\\n\\tfunction removeMult(string[] memory contentIds) external {\\n\\t\\tfor (uint256 i = 0; i < contentIds.length; i++) {\\n\\t\\t\\t_remove(msg.sender, contentIds[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev remove ipfs contentId\\n\\t/// @param contentId ipfs contentId id\\n\\tfunction remove(string memory contentId) external{\\n\\t\\t_remove(msg.sender, contentId);\\n\\t}\\n\\n\\tfunction _remove(\\n\\t\\taddress account,\\n\\t\\tstring memory contentId\\n\\t) internal {\\n\\t\\trequire(exists(account, contentId), 'ContentIDRegistry: nonexistent contentId');\\n\\t\\tdelete metas[account][contentId];\\n\\t\\temit Remove(account, contentId);\\n\\t}\\n\\n\\tfunction getValue(IERC20 token, uint256 size, uint256 expiration) public view returns(uint256 value) {\\n\\t\\trequire(tokenExists(token), 'ContentIDRegistry: nonexistent token');\\n\\t\\tvalue = priceAdaptor.getValue(tokens[token], size, expiration);\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xae81e9691a10878c0354e3e056d5f25bffce2b8ccdae71b8188ac9b837758d3b\",\"license\":\"GPL-3.0-only\"},\"contracts/PayTokens.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.4;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\nimport './interfaces/IERC20.sol';\\n\\n/// @author Alexandas\\n/// @dev pay tokens contract\\ncontract PayTokens is OwnableUpgradeable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\t// token -> decimals\\n\\tmapping(IERC20 => uint8) public tokens;\\n\\n\\t/// @dev emit when pay token added\\n\\t/// @param token token address\\n\\t/// @param decimals token decimals\\n\\tevent AddToken(IERC20 token, uint8 decimals);\\n\\n\\t/// @dev emit when pay token removed\\n\\t/// @param token token address\\n\\tevent RemoveToken(IERC20 token);\\n\\n    constructor() initializer {}\\n\\n\\tfunction __Init_Pay_Token(address admin, IERC20 token) internal onlyInitializing {\\n\\t\\t_transferOwnership(admin);\\n\\t\\t_addToken(token);\\n\\t}\\n\\n\\tfunction addToken(IERC20 token) external onlyOwner {\\n\\t\\t_addToken(token);\\n\\t}\\n\\n\\tfunction removeToken(IERC20 token) external onlyOwner {\\n\\t\\t_removeToken(token);\\n\\t}\\n\\n\\tfunction _addToken(IERC20 token) internal {\\n\\t\\trequire(!tokenExists(token), 'PayTokens: token exists');\\n\\t\\ttokens[token] = token.decimals();\\n\\t}\\n\\n\\tfunction _removeToken(IERC20 token) internal {\\n\\t\\trequire(tokenExists(token), 'PayTokens: nonexistent token');\\n\\t\\tdelete tokens[token];\\n\\t}\\n\\n\\tfunction tokenExists(IERC20 token) public view returns(bool) {\\n\\t\\treturn tokens[token] > 0;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x5efe5cc424d73490829c02760e1fbf9bdfc2877da0a71404721bfa7c60bb312b\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.4;\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\n\\ninterface IERC20 is IERC20Upgradeable {\\n\\tfunction decimals() external view returns(uint8);\\n}\",\"keccak256\":\"0x7b9c5533c121fa83eb22326a0585e80c448673f8870d6a34bb6331eb5661a860\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPriceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.4;\\n\\ninterface IPriceAdaptor {\\n\\n\\tevent PriceUpdated(uint256 _price);\\n\\n\\t/// @dev return cost of content with specific content size and expiration\\n\\t/// @param size content size\\n\\t/// @param expiration content expiration\\n\\t/// @return token value in decimals(30)\\n\\tfunction getValue(\\n\\t\\tuint256 size,\\n\\t\\tuint256 expiration\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev get amount resource with value at a specific block\\n\\t/// @param value token value in decimals(30)\\n\\t/// @param expiration content expiration\\n\\t/// @return size content size\\n\\tfunction getSizeWith(\\n\\t\\tuint256 value,\\n\\t\\tuint256 expiration\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev get amount resource with value at a specific block\\n\\t/// @param value token value in decimals(30)\\n\\t/// @param size content size\\n\\t/// @return content expiration\\n\\tfunction getExpirationWith(\\n\\t\\tuint256 value,\\n\\t\\tuint256 size\\n\\t) external view returns (uint256);\\n\\n\\tfunction getValue(uint8 tokenDecimals, uint256 size, uint256 expiration) external view returns(uint256 value);\\n\\n\\tfunction matchValueToToken(uint8 tokenDecimals, uint256 value) external pure returns(uint256);\\n\\n}\",\"keccak256\":\"0xa9986628b4ab288b5ebf39621e2f8fb214987ec3bde762f1c7dc6387bd1c95fd\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff1615808015620000335750600054600160ff909116105b806200006357506200005030620001c560201b620008701760201c565b15801562000063575060005460ff166001145b6200008b5760405162461bcd60e51b81526004016200008290620001d4565b60405180910390fd5b6000805460ff191660011790558015620000af576000805461ff0019166101001790555b8015620000ec576000805461ff001916905560405160008051602062001d6d83398151915290620000e3906001906200024a565b60405180910390a15b50600054610100900460ff16158080156200010e5750600054600160ff909116105b806200013e57506200012b30620001c560201b620008701760201c565b1580156200013e575060005460ff166001145b6200015d5760405162461bcd60e51b81526004016200008290620001d4565b6000805460ff19166001179055801562000181576000805461ff0019166101001790555b8015620001be576000805461ff001916905560405160008051602062001d6d83398151915290620001b5906001906200024a565b60405180910390a15b506200025a565b6001600160a01b03163b151590565b602080825281016200022781602e81527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160208201526d191e481a5b9a5d1a585b1a5e995960921b604082015260600190565b92915050565b600060ff821662000227565b62000244816200022d565b82525050565b6020810162000227828462000239565b611b03806200026a6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806375190dd1116100b8578063b33f78ca1161007c578063b33f78ca146102cd578063c0c53b8b146102e0578063d48bfca7146102f3578063d8999bdf14610306578063e486033914610319578063f2fde38b1461034957600080fd5b806375190dd114610214578063775a4cb01461026e57806380599e4b1461028e5780638da5cb5b146102a1578063b31bdec4146102ba57600080fd5b8063298468a7116100ff578063298468a7146101c057806337e491c9146101d357806352bbb4f2146101e65780635fa7b584146101f9578063715018a61461020c57600080fd5b806305ee43f61461013c578063064146181461015157806308b1cdcf1461016457806309be8e1d1461018d5780631266cc06146101a0575b600080fd5b61014f61014a36600461103f565b61035c565b005b61014f61015f3660046110c6565b6103a1565b610177610172366004611145565b6103b5565b604051610184919061119d565b60405180910390f35b61017761019b3660046111bf565b610487565b6066546101b3906001600160a01b031681565b604051610184919061122b565b61014f6101ce3660046112ae565b6104c6565b6101776101e13660046111bf565b610586565b61014f6101f4366004611357565b61063f565b61014f6102073660046113a7565b610651565b61014f610665565b61025f6102223660046111bf565b6067602090815260009283526040909220815180830184018051928152908401929093019190912091528054600182015460029092015490919083565b604051610184939291906113c8565b61028161027c3660046111bf565b610679565b60405161018491906113f8565b61014f61029c366004611406565b6106bb565b6033546001600160a01b0316604051610184919061144a565b6101776102c83660046111bf565b6106c5565b6102816102db3660046113a7565b610705565b61014f6102ee366004611458565b610725565b61014f6103013660046113a7565b610813565b6102816103143660046111bf565b610824565b61033c6103273660046113a7565b60656020526000908152604090205460ff1681565b60405161018491906114a7565b61014f6103573660046114b5565b610839565b60005b815181101561039d5761038b3383838151811061037e5761037e6114d6565b602002602001015161087f565b8061039581611502565b91505061035f565b5050565b6103af843333868686610928565b50505050565b60006103c084610705565b6103e55760405162461bcd60e51b81526004016103dc90611561565b60405180910390fd5b6066546001600160a01b0385811660009081526065602052604090819020549051639504c00360e01b81529190921691639504c0039161042f9160ff169087908790600401611571565b60206040518083038186803b15801561044757600080fd5b505afa15801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f919061158a565b949350505050565b6001600160a01b03821660009081526067602052604080822090516104ad9084906115f9565b9081526040519081900360200190205490505b92915050565b81518351146104e75760405162461bcd60e51b81526004016103dc9061164e565b80518351146105085760405162461bcd60e51b81526004016103dc9061164e565b60005b835181101561057f5761056d85333387858151811061052c5761052c6114d6565b6020026020010151878681518110610546576105466114d6565b6020026020010151878781518110610560576105606114d6565b6020026020010151610928565b8061057781611502565b91505061050b565b5050505050565b60006105928383610679565b6105ae5760405162461bcd60e51b81526004016103dc906116a3565b6001600160a01b03831660009081526067602052604090819020905161063891906105da9085906115f9565b90815260200160405180910390206002015460676000866001600160a01b03166001600160a01b031681526020019081526020016000208460405161061f91906115f9565b9081526040519081900360200190206001015490610b0e565b9392505050565b61064c8333338585610b1a565b505050565b610659610cc9565b61066281610cf3565b50565b61066d610cc9565b6106776000610d39565b565b6001600160a01b03821660009081526067602052604080822090518291906106a29085906115f9565b9081526040519081900360200190205411905092915050565b610662338261087f565b6001600160a01b03821660009081526067602052604080822090516106eb9084906115f9565b908152602001604051809103902060010154905092915050565b6001600160a01b031660009081526065602052604090205460ff16151590565b600054610100900460ff16158080156107455750600054600160ff909116105b8061075f5750303b15801561075f575060005460ff166001145b61077b5760405162461bcd60e51b81526004016103dc906116fe565b6000805460ff19166001179055801561079e576000805461ff0019166101001790555b606680546001600160a01b0319166001600160a01b0385161790556107c38483610d8b565b80156103af576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989061080590600190611722565b60405180910390a150505050565b61081b610cc9565b61066281610dc0565b6000426108318484610586565b109392505050565b610841610cc9565b6001600160a01b0381166108675760405162461bcd60e51b81526004016103dc90611773565b61066281610d39565b6001600160a01b03163b151590565b6108898282610679565b6108a55760405162461bcd60e51b81526004016103dc906116a3565b6001600160a01b0382166000908152606760205260409081902090516108cc9083906115f9565b9081526040519081900360200181206000808255600182018190556002909101557fafb58637702ac59f4ec776bf00731c6db5de2befbf39779a2c5be4922201bb0e9061091c90849084906117b5565b60405180910390a15050565b61093186610705565b61094d5760405162461bcd60e51b81526004016103dc90611561565b6109578484610679565b158061096857506109688484610824565b6109845760405162461bcd60e51b81526004016103dc9061182f565b60008211806109935750600081115b6109af5760405162461bcd60e51b81526004016103dc9061187d565b60006109bc8784846103b5565b6040516323b872dd60e01b81529091506001600160a01b038816906323b872dd906109ef9089903090869060040161188d565b602060405180830381600087803b158015610a0957600080fd5b505af1158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4191906118bb565b5060405180606001604052808481526020018381526020014281525060676000876001600160a01b03166001600160a01b0316815260200190815260200160002085604051610a9091906115f9565b90815260200160405180910390206000820151816000015560208201518160010155604082015181600201559050507f4471eb362c285c1ce8c27b53fa652555ee6b39467a3108f2024529852e38accf858585610aed8989610586565b604051610afd94939291906118dc565b60405180910390a150505050505050565b60006106388284611921565b610b2385610705565b610b3f5760405162461bcd60e51b81526004016103dc90611561565b610b498383610679565b610b655760405162461bcd60e51b81526004016103dc906116a3565b610b6f8383610824565b15610b8c5760405162461bcd60e51b81526004016103dc90611966565b60008111610bac5760405162461bcd60e51b81526004016103dc9061187d565b6000610bb88484610487565b90506000610bc78783856103b5565b6040516323b872dd60e01b81529091506001600160a01b038816906323b872dd90610bfa9089903090869060040161188d565b602060405180830381600087803b158015610c1457600080fd5b505af1158015610c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4c91906118bb565b50610c61610c5a86866106c5565b8490610b0e565b6001600160a01b038616600090815260676020526040908190209051610c889087906115f9565b908152604051908190036020019020600101557f4471eb362c285c1ce8c27b53fa652555ee6b39467a3108f2024529852e38accf858584610aed8383610586565b6033546001600160a01b031633146106775760405162461bcd60e51b81526004016103dc906119a8565b610cfc81610705565b610d185760405162461bcd60e51b81526004016103dc906119ec565b6001600160a01b03166000908152606560205260409020805460ff19169055565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610db25760405162461bcd60e51b81526004016103dc90611a44565b610dbb82610d39565b61039d815b610dc981610705565b15610de65760405162461bcd60e51b81526004016103dc90611a88565b806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1f57600080fd5b505afa158015610e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e579190611aac565b6001600160a01b03919091166000908152606560205260409020805460ff191660ff909216919091179055565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610ec057610ec0610e84565b6040525050565b6000610ed260405190565b9050610ede8282610e9a565b919050565b600067ffffffffffffffff821115610efd57610efd610e84565b5060209081020190565b600067ffffffffffffffff821115610f2157610f21610e84565b601f19601f83011660200192915050565b82818337506000910152565b6000610f51610f4c84610f07565b610ec7565b905082815260208101848484011115610f6c57610f6c600080fd5b610f77848285610f32565b509392505050565b600082601f830112610f9357610f93600080fd5b813561047f848260208601610f3e565b6000610fb1610f4c84610ee3565b83815290506020808201908402830185811115610fd057610fd0600080fd5b835b8181101561101157803567ffffffffffffffff811115610ff457610ff4600080fd5b8086016110018982610f7f565b8552505060209283019201610fd2565b5050509392505050565b600082601f83011261102f5761102f600080fd5b813561047f848260208601610fa3565b60006020828403121561105457611054600080fd5b813567ffffffffffffffff81111561106e5761106e600080fd5b61047f8482850161101b565b60006001600160a01b0382166104c0565b60006104c08261107a565b61109f8161108b565b811461066257600080fd5b80356104c081611096565b8061109f565b80356104c0816110b5565b600080600080608085870312156110df576110df600080fd5b60006110eb87876110aa565b945050602085013567ffffffffffffffff81111561110b5761110b600080fd5b61111787828801610f7f565b9350506040611128878288016110bb565b9250506060611139878288016110bb565b91505092959194509250565b60008060006060848603121561115d5761115d600080fd5b600061116986866110aa565b935050602061117a868287016110bb565b925050604061118b868287016110bb565b9150509250925092565b805b82525050565b602081016104c08284611195565b61109f8161107a565b80356104c0816111ab565b600080604083850312156111d5576111d5600080fd5b60006111e185856111b4565b925050602083013567ffffffffffffffff81111561120157611201600080fd5b61120d85828601610f7f565b9150509250929050565b60006104c08261108b565b61119781611217565b602081016104c08284611222565b6000611247610f4c84610ee3565b8381529050602080820190840283018581111561126657611266600080fd5b835b81811015611011578061127b88826110bb565b84525060209283019201611268565b600082601f83011261129e5761129e600080fd5b813561047f848260208601611239565b600080600080608085870312156112c7576112c7600080fd5b60006112d387876110aa565b945050602085013567ffffffffffffffff8111156112f3576112f3600080fd5b6112ff8782880161101b565b935050604085013567ffffffffffffffff81111561131f5761131f600080fd5b61132b8782880161128a565b925050606085013567ffffffffffffffff81111561134b5761134b600080fd5b6111398782880161128a565b60008060006060848603121561136f5761136f600080fd5b600061137b86866110aa565b935050602084013567ffffffffffffffff81111561139b5761139b600080fd5b61117a86828701610f7f565b6000602082840312156113bc576113bc600080fd5b600061047f84846110aa565b606081016113d68286611195565b6113e36020830185611195565b61047f6040830184611195565b801515611197565b602081016104c082846113f0565b60006020828403121561141b5761141b600080fd5b813567ffffffffffffffff81111561143557611435600080fd5b61047f84828501610f7f565b6111978161107a565b602081016104c08284611441565b60008060006060848603121561147057611470600080fd5b600061147c86866111b4565b935050602061148d868287016110aa565b925050604061118b868287016110aa565b60ff8116611197565b602081016104c0828461149e565b6000602082840312156114ca576114ca600080fd5b600061047f84846111b4565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611516576115166114ec565b5060010190565b602481526000602082017f436f6e74656e74494452656769737472793a206e6f6e6578697374656e74207481526337b5b2b760e11b602082015291505b5060400190565b602080825281016104c08161151d565b606081016113d6828661149e565b80516104c0816110b5565b60006020828403121561159f5761159f600080fd5b600061047f848461157f565b60005b838110156115c65781810151838201526020016115ae565b838111156103af5750506000910152565b60006115e1825190565b6115ef8185602086016115ab565b9290920192915050565b600061063882846115d7565b602c81526000602082017f436f6e74656e74494452656769737472793a20696e76616c696420706172616d81526b32ba32b9103632b733ba341760a11b6020820152915061155a565b602080825281016104c081611605565b602881526000602082017f436f6e74656e74494452656769737472793a206e6f6e6578697374656e7420638152671bdb9d195b9d125960c21b6020820152915061155a565b602080825281016104c08161165e565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b6020820152915061155a565b602080825281016104c0816116b3565b600060ff82166104c0565b6111978161170e565b602081016104c08284611719565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b6020820152915061155a565b602080825281016104c081611730565b600061178d825190565b8084526020840193506117a48185602086016115ab565b601f01601f19169290920192915050565b604081016117c38285611441565b818103602083015261047f8184611783565b603b81526000602082017f436f6e74656e74494452656769737472793a20636f6e74656e7449642065786981527f737473206f72206e6f6e6578706972656420636f6e74656e74496400000000006020820152915061155a565b602080825281016104c0816117d5565b602181526000602082017f436f6e74656e74494452656769737472793a20696e76616c696420706172616d8152607360f81b6020820152915061155a565b602080825281016104c08161183f565b6060810161189b8286611441565b6113e36020830185611441565b80151561109f565b80516104c0816118a8565b6000602082840312156118d0576118d0600080fd5b600061047f84846118b0565b608081016118ea8287611441565b81810360208301526118fc8186611783565b905061190b6040830185611195565b6119186060830184611195565b95945050505050565b60008219821115611934576119346114ec565b500190565b6013815260006020820172021b7b73a32b73a24a22932b3b4b9ba393c9d1606d1b815291505b5060200190565b602080825281016104c081611939565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152600061195f565b602080825281016104c081611976565b601c81526000602082017f506179546f6b656e733a206e6f6e6578697374656e7420746f6b656e000000008152915061195f565b602080825281016104c0816119b8565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b6020820152915061155a565b602080825281016104c0816119fc565b601781526000602082017f506179546f6b656e733a20746f6b656e206578697374730000000000000000008152915061195f565b602080825281016104c081611a54565b60ff811661109f565b80516104c081611a98565b600060208284031215611ac157611ac1600080fd5b600061047f8484611aa156fea2646970667358221220a8b13164dcd1c0b0009f43bb176469533d57bda988d096730531b33936d0353764736f6c634300080900337f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c806375190dd1116100b8578063b33f78ca1161007c578063b33f78ca146102cd578063c0c53b8b146102e0578063d48bfca7146102f3578063d8999bdf14610306578063e486033914610319578063f2fde38b1461034957600080fd5b806375190dd114610214578063775a4cb01461026e57806380599e4b1461028e5780638da5cb5b146102a1578063b31bdec4146102ba57600080fd5b8063298468a7116100ff578063298468a7146101c057806337e491c9146101d357806352bbb4f2146101e65780635fa7b584146101f9578063715018a61461020c57600080fd5b806305ee43f61461013c578063064146181461015157806308b1cdcf1461016457806309be8e1d1461018d5780631266cc06146101a0575b600080fd5b61014f61014a36600461103f565b61035c565b005b61014f61015f3660046110c6565b6103a1565b610177610172366004611145565b6103b5565b604051610184919061119d565b60405180910390f35b61017761019b3660046111bf565b610487565b6066546101b3906001600160a01b031681565b604051610184919061122b565b61014f6101ce3660046112ae565b6104c6565b6101776101e13660046111bf565b610586565b61014f6101f4366004611357565b61063f565b61014f6102073660046113a7565b610651565b61014f610665565b61025f6102223660046111bf565b6067602090815260009283526040909220815180830184018051928152908401929093019190912091528054600182015460029092015490919083565b604051610184939291906113c8565b61028161027c3660046111bf565b610679565b60405161018491906113f8565b61014f61029c366004611406565b6106bb565b6033546001600160a01b0316604051610184919061144a565b6101776102c83660046111bf565b6106c5565b6102816102db3660046113a7565b610705565b61014f6102ee366004611458565b610725565b61014f6103013660046113a7565b610813565b6102816103143660046111bf565b610824565b61033c6103273660046113a7565b60656020526000908152604090205460ff1681565b60405161018491906114a7565b61014f6103573660046114b5565b610839565b60005b815181101561039d5761038b3383838151811061037e5761037e6114d6565b602002602001015161087f565b8061039581611502565b91505061035f565b5050565b6103af843333868686610928565b50505050565b60006103c084610705565b6103e55760405162461bcd60e51b81526004016103dc90611561565b60405180910390fd5b6066546001600160a01b0385811660009081526065602052604090819020549051639504c00360e01b81529190921691639504c0039161042f9160ff169087908790600401611571565b60206040518083038186803b15801561044757600080fd5b505afa15801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f919061158a565b949350505050565b6001600160a01b03821660009081526067602052604080822090516104ad9084906115f9565b9081526040519081900360200190205490505b92915050565b81518351146104e75760405162461bcd60e51b81526004016103dc9061164e565b80518351146105085760405162461bcd60e51b81526004016103dc9061164e565b60005b835181101561057f5761056d85333387858151811061052c5761052c6114d6565b6020026020010151878681518110610546576105466114d6565b6020026020010151878781518110610560576105606114d6565b6020026020010151610928565b8061057781611502565b91505061050b565b5050505050565b60006105928383610679565b6105ae5760405162461bcd60e51b81526004016103dc906116a3565b6001600160a01b03831660009081526067602052604090819020905161063891906105da9085906115f9565b90815260200160405180910390206002015460676000866001600160a01b03166001600160a01b031681526020019081526020016000208460405161061f91906115f9565b9081526040519081900360200190206001015490610b0e565b9392505050565b61064c8333338585610b1a565b505050565b610659610cc9565b61066281610cf3565b50565b61066d610cc9565b6106776000610d39565b565b6001600160a01b03821660009081526067602052604080822090518291906106a29085906115f9565b9081526040519081900360200190205411905092915050565b610662338261087f565b6001600160a01b03821660009081526067602052604080822090516106eb9084906115f9565b908152602001604051809103902060010154905092915050565b6001600160a01b031660009081526065602052604090205460ff16151590565b600054610100900460ff16158080156107455750600054600160ff909116105b8061075f5750303b15801561075f575060005460ff166001145b61077b5760405162461bcd60e51b81526004016103dc906116fe565b6000805460ff19166001179055801561079e576000805461ff0019166101001790555b606680546001600160a01b0319166001600160a01b0385161790556107c38483610d8b565b80156103af576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989061080590600190611722565b60405180910390a150505050565b61081b610cc9565b61066281610dc0565b6000426108318484610586565b109392505050565b610841610cc9565b6001600160a01b0381166108675760405162461bcd60e51b81526004016103dc90611773565b61066281610d39565b6001600160a01b03163b151590565b6108898282610679565b6108a55760405162461bcd60e51b81526004016103dc906116a3565b6001600160a01b0382166000908152606760205260409081902090516108cc9083906115f9565b9081526040519081900360200181206000808255600182018190556002909101557fafb58637702ac59f4ec776bf00731c6db5de2befbf39779a2c5be4922201bb0e9061091c90849084906117b5565b60405180910390a15050565b61093186610705565b61094d5760405162461bcd60e51b81526004016103dc90611561565b6109578484610679565b158061096857506109688484610824565b6109845760405162461bcd60e51b81526004016103dc9061182f565b60008211806109935750600081115b6109af5760405162461bcd60e51b81526004016103dc9061187d565b60006109bc8784846103b5565b6040516323b872dd60e01b81529091506001600160a01b038816906323b872dd906109ef9089903090869060040161188d565b602060405180830381600087803b158015610a0957600080fd5b505af1158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4191906118bb565b5060405180606001604052808481526020018381526020014281525060676000876001600160a01b03166001600160a01b0316815260200190815260200160002085604051610a9091906115f9565b90815260200160405180910390206000820151816000015560208201518160010155604082015181600201559050507f4471eb362c285c1ce8c27b53fa652555ee6b39467a3108f2024529852e38accf858585610aed8989610586565b604051610afd94939291906118dc565b60405180910390a150505050505050565b60006106388284611921565b610b2385610705565b610b3f5760405162461bcd60e51b81526004016103dc90611561565b610b498383610679565b610b655760405162461bcd60e51b81526004016103dc906116a3565b610b6f8383610824565b15610b8c5760405162461bcd60e51b81526004016103dc90611966565b60008111610bac5760405162461bcd60e51b81526004016103dc9061187d565b6000610bb88484610487565b90506000610bc78783856103b5565b6040516323b872dd60e01b81529091506001600160a01b038816906323b872dd90610bfa9089903090869060040161188d565b602060405180830381600087803b158015610c1457600080fd5b505af1158015610c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4c91906118bb565b50610c61610c5a86866106c5565b8490610b0e565b6001600160a01b038616600090815260676020526040908190209051610c889087906115f9565b908152604051908190036020019020600101557f4471eb362c285c1ce8c27b53fa652555ee6b39467a3108f2024529852e38accf858584610aed8383610586565b6033546001600160a01b031633146106775760405162461bcd60e51b81526004016103dc906119a8565b610cfc81610705565b610d185760405162461bcd60e51b81526004016103dc906119ec565b6001600160a01b03166000908152606560205260409020805460ff19169055565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610db25760405162461bcd60e51b81526004016103dc90611a44565b610dbb82610d39565b61039d815b610dc981610705565b15610de65760405162461bcd60e51b81526004016103dc90611a88565b806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1f57600080fd5b505afa158015610e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e579190611aac565b6001600160a01b03919091166000908152606560205260409020805460ff191660ff909216919091179055565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610ec057610ec0610e84565b6040525050565b6000610ed260405190565b9050610ede8282610e9a565b919050565b600067ffffffffffffffff821115610efd57610efd610e84565b5060209081020190565b600067ffffffffffffffff821115610f2157610f21610e84565b601f19601f83011660200192915050565b82818337506000910152565b6000610f51610f4c84610f07565b610ec7565b905082815260208101848484011115610f6c57610f6c600080fd5b610f77848285610f32565b509392505050565b600082601f830112610f9357610f93600080fd5b813561047f848260208601610f3e565b6000610fb1610f4c84610ee3565b83815290506020808201908402830185811115610fd057610fd0600080fd5b835b8181101561101157803567ffffffffffffffff811115610ff457610ff4600080fd5b8086016110018982610f7f565b8552505060209283019201610fd2565b5050509392505050565b600082601f83011261102f5761102f600080fd5b813561047f848260208601610fa3565b60006020828403121561105457611054600080fd5b813567ffffffffffffffff81111561106e5761106e600080fd5b61047f8482850161101b565b60006001600160a01b0382166104c0565b60006104c08261107a565b61109f8161108b565b811461066257600080fd5b80356104c081611096565b8061109f565b80356104c0816110b5565b600080600080608085870312156110df576110df600080fd5b60006110eb87876110aa565b945050602085013567ffffffffffffffff81111561110b5761110b600080fd5b61111787828801610f7f565b9350506040611128878288016110bb565b9250506060611139878288016110bb565b91505092959194509250565b60008060006060848603121561115d5761115d600080fd5b600061116986866110aa565b935050602061117a868287016110bb565b925050604061118b868287016110bb565b9150509250925092565b805b82525050565b602081016104c08284611195565b61109f8161107a565b80356104c0816111ab565b600080604083850312156111d5576111d5600080fd5b60006111e185856111b4565b925050602083013567ffffffffffffffff81111561120157611201600080fd5b61120d85828601610f7f565b9150509250929050565b60006104c08261108b565b61119781611217565b602081016104c08284611222565b6000611247610f4c84610ee3565b8381529050602080820190840283018581111561126657611266600080fd5b835b81811015611011578061127b88826110bb565b84525060209283019201611268565b600082601f83011261129e5761129e600080fd5b813561047f848260208601611239565b600080600080608085870312156112c7576112c7600080fd5b60006112d387876110aa565b945050602085013567ffffffffffffffff8111156112f3576112f3600080fd5b6112ff8782880161101b565b935050604085013567ffffffffffffffff81111561131f5761131f600080fd5b61132b8782880161128a565b925050606085013567ffffffffffffffff81111561134b5761134b600080fd5b6111398782880161128a565b60008060006060848603121561136f5761136f600080fd5b600061137b86866110aa565b935050602084013567ffffffffffffffff81111561139b5761139b600080fd5b61117a86828701610f7f565b6000602082840312156113bc576113bc600080fd5b600061047f84846110aa565b606081016113d68286611195565b6113e36020830185611195565b61047f6040830184611195565b801515611197565b602081016104c082846113f0565b60006020828403121561141b5761141b600080fd5b813567ffffffffffffffff81111561143557611435600080fd5b61047f84828501610f7f565b6111978161107a565b602081016104c08284611441565b60008060006060848603121561147057611470600080fd5b600061147c86866111b4565b935050602061148d868287016110aa565b925050604061118b868287016110aa565b60ff8116611197565b602081016104c0828461149e565b6000602082840312156114ca576114ca600080fd5b600061047f84846111b4565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611516576115166114ec565b5060010190565b602481526000602082017f436f6e74656e74494452656769737472793a206e6f6e6578697374656e74207481526337b5b2b760e11b602082015291505b5060400190565b602080825281016104c08161151d565b606081016113d6828661149e565b80516104c0816110b5565b60006020828403121561159f5761159f600080fd5b600061047f848461157f565b60005b838110156115c65781810151838201526020016115ae565b838111156103af5750506000910152565b60006115e1825190565b6115ef8185602086016115ab565b9290920192915050565b600061063882846115d7565b602c81526000602082017f436f6e74656e74494452656769737472793a20696e76616c696420706172616d81526b32ba32b9103632b733ba341760a11b6020820152915061155a565b602080825281016104c081611605565b602881526000602082017f436f6e74656e74494452656769737472793a206e6f6e6578697374656e7420638152671bdb9d195b9d125960c21b6020820152915061155a565b602080825281016104c08161165e565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b6020820152915061155a565b602080825281016104c0816116b3565b600060ff82166104c0565b6111978161170e565b602081016104c08284611719565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b6020820152915061155a565b602080825281016104c081611730565b600061178d825190565b8084526020840193506117a48185602086016115ab565b601f01601f19169290920192915050565b604081016117c38285611441565b818103602083015261047f8184611783565b603b81526000602082017f436f6e74656e74494452656769737472793a20636f6e74656e7449642065786981527f737473206f72206e6f6e6578706972656420636f6e74656e74496400000000006020820152915061155a565b602080825281016104c0816117d5565b602181526000602082017f436f6e74656e74494452656769737472793a20696e76616c696420706172616d8152607360f81b6020820152915061155a565b602080825281016104c08161183f565b6060810161189b8286611441565b6113e36020830185611441565b80151561109f565b80516104c0816118a8565b6000602082840312156118d0576118d0600080fd5b600061047f84846118b0565b608081016118ea8287611441565b81810360208301526118fc8186611783565b905061190b6040830185611195565b6119186060830184611195565b95945050505050565b60008219821115611934576119346114ec565b500190565b6013815260006020820172021b7b73a32b73a24a22932b3b4b9ba393c9d1606d1b815291505b5060200190565b602080825281016104c081611939565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152600061195f565b602080825281016104c081611976565b601c81526000602082017f506179546f6b656e733a206e6f6e6578697374656e7420746f6b656e000000008152915061195f565b602080825281016104c0816119b8565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b6020820152915061155a565b602080825281016104c0816119fc565b601781526000602082017f506179546f6b656e733a20746f6b656e206578697374730000000000000000008152915061195f565b602080825281016104c081611a54565b60ff811661109f565b80516104c081611a98565b600060208284031215611ac157611ac1600080fd5b600061047f8484611aa156fea2646970667358221220a8b13164dcd1c0b0009f43bb176469533d57bda988d096730531b33936d0353764736f6c63430008090033",
  "devdoc": {
    "author": "Alexandas",
    "details": "IPFS content id registry",
    "events": {
      "Remove(address,string)": {
        "details": "emit when ipfs contentId removed",
        "params": {
          "account": "user account",
          "contentId": "ipfs contentId"
        }
      },
      "Upset(address,string,uint256,uint256)": {
        "details": "emit when ipfs contentId inserted or updated",
        "params": {
          "account": "user account",
          "contentId": "ipfs contentId",
          "expiredAt": "ipfs contentId expiredAt",
          "size": "ipfs contentId size"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "initialize(address,address,address)": {
        "details": "proxy initialize function"
      },
      "insert(address,string,uint256,uint256)": {
        "details": "insert ipfs contentId",
        "params": {
          "contentId": "ipfs contentId",
          "expiration": "of ipfs contentId expiration",
          "size": "ipfs contentId size",
          "token": "ERC20 token"
        }
      },
      "insertMult(address,string[],uint256[],uint256[])": {
        "details": "insert multiple ipfs contentId for accounts",
        "params": {
          "contentIds": "array of ipfs contentIds",
          "expirations": "array of ipfs contentId expirations",
          "sizes": "array of ipfs contentId size",
          "token": "ERC20 token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "remove(string)": {
        "details": "remove ipfs contentId",
        "params": {
          "contentId": "ipfs contentId id"
        }
      },
      "removeMult(string[])": {
        "details": "remove ipfs contentId",
        "params": {
          "contentIds": "array of ipfs contentIds"
        }
      },
      "renew(address,string,uint256)": {
        "details": "renew ipfs contentId",
        "params": {
          "contentId": "ipfs contentId",
          "expiration": "of ipfs contentId expiration",
          "token": "ERC20 token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "metas": {
        "details": "ipfs contentId contentId meta"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 141,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 144,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 647,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1559,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "tokens",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_contract(IERC20)1693,t_uint8)"
      },
      {
        "astId": 981,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "priceAdaptor",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IPriceAdaptor)1750"
      },
      {
        "astId": 989,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "metas",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(ContentMeta)978_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1693": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceAdaptor)1750": {
        "encoding": "inplace",
        "label": "contract IPriceAdaptor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(ContentMeta)978_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => struct ContentIDRegistry.ContentMeta))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(ContentMeta)978_storage)"
      },
      "t_mapping(t_contract(IERC20)1693,t_uint8)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1693",
        "label": "mapping(contract IERC20 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_string_memory_ptr,t_struct(ContentMeta)978_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct ContentIDRegistry.ContentMeta)",
        "numberOfBytes": "32",
        "value": "t_struct(ContentMeta)978_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ContentMeta)978_storage": {
        "encoding": "inplace",
        "label": "struct ContentIDRegistry.ContentMeta",
        "members": [
          {
            "astId": 973,
            "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 975,
            "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
            "label": "expiration",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 977,
            "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
            "label": "createAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}