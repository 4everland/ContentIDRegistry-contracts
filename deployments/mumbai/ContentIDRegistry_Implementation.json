{
  "address": "0x1AF927464e486Ae98F75A65ac756AAD9EcA45580",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "Remove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "Upset",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "expiredAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "getExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "getSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "getupdateAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceAdaptor",
          "name": "_priceAdaptor",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "insert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "contentIds",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "expirations",
          "type": "uint256[]"
        }
      ],
      "name": "insertMult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "isExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "matchValueToDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "metas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updateAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceAdaptor",
      "outputs": [
        {
          "internalType": "contract IPriceAdaptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "contentIds",
          "type": "string[]"
        }
      ],
      "name": "removeMult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tokenExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "extraExpiration",
          "type": "uint256"
        }
      ],
      "name": "updateExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "contentIds",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "extraExpirations",
          "type": "uint256[]"
        }
      ],
      "name": "updateExpirationMult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "extraSize",
          "type": "uint256"
        }
      ],
      "name": "updateSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "contentIds",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "extraSizes",
          "type": "uint256[]"
        }
      ],
      "name": "updateSizeMult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb45aba93a6f3c0fecd3d93d3204a21e20f8705d96eec9f5ab4b26ee2532a9fb",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0x1AF927464e486Ae98F75A65ac756AAD9EcA45580",
    "transactionIndex": 26,
    "gasUsed": "1824060",
    "logsBloom": "0x
    "blockHash": "0x6614c78b516f46f300c181aa387678bf07b4b6336b9007bf6efed0c7bd77e8d0",
    "transactionHash": "0xdb45aba93a6f3c0fecd3d93d3204a21e20f8705d96eec9f5ab4b26ee2532a9fb",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 28658768,
        "transactionHash": "0xdb45aba93a6f3c0fecd3d93d3204a21e20f8705d96eec9f5ab4b26ee2532a9fb",
        "address": "0x1AF927464e486Ae98F75A65ac756AAD9EcA45580",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 181,
        "blockHash": "0x6614c78b516f46f300c181aa387678bf07b4b6336b9007bf6efed0c7bd77e8d0"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 28658768,
        "transactionHash": "0xdb45aba93a6f3c0fecd3d93d3204a21e20f8705d96eec9f5ab4b26ee2532a9fb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000009b875988604000000000000000000000000000000000000000000000000004976afe8a6a87fe30000000000000000000000000000000000000000000007f1fc36e1c76c175221000000000000000000000000000000000000000000000000496cf7730e227be30000000000000000000000000000000000000000000007f1fc409a3d049d5621",
        "logIndex": 182,
        "blockHash": "0x6614c78b516f46f300c181aa387678bf07b4b6336b9007bf6efed0c7bd77e8d0"
      }
    ],
    "blockNumber": 28658768,
    "cumulativeGasUsed": "13186500",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b4680b715084fdeffd8390179fbb2d2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"Upset\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"expiredAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"getExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"getSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"getupdateAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceAdaptor\",\"name\":\"_priceAdaptor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"contentIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"expirations\",\"type\":\"uint256[]\"}],\"name\":\"insertMult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"matchValueToDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"metas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAdaptor\",\"outputs\":[{\"internalType\":\"contract IPriceAdaptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"contentIds\",\"type\":\"string[]\"}],\"name\":\"removeMult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"extraExpiration\",\"type\":\"uint256\"}],\"name\":\"updateExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"contentIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"extraExpirations\",\"type\":\"uint256[]\"}],\"name\":\"updateExpirationMult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"extraSize\",\"type\":\"uint256\"}],\"name\":\"updateSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"contentIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"extraSizes\",\"type\":\"uint256[]\"}],\"name\":\"updateSizeMult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alexandas\",\"details\":\"IPFS content id registry\",\"events\":{\"Remove(address,string)\":{\"details\":\"emit when ipfs contentId removed\",\"params\":{\"account\":\"user account\",\"contentId\":\"ipfs contentId\"}},\"Upset(address,string,uint256,uint256)\":{\"details\":\"emit when ipfs contentId inserted or updated\",\"params\":{\"account\":\"user account\",\"contentId\":\"ipfs contentId\",\"expiration\":\"ipfs contentId expiration\",\"size\":\"ipfs contentId size\"}}},\"kind\":\"dev\",\"methods\":{\"initialize(address,address,uint256)\":{\"details\":\"proxy initialize function\"},\"insert(address,string,uint256,uint256)\":{\"details\":\"insert ipfs contentId\",\"params\":{\"contentId\":\"ipfs contentId\",\"expiration\":\"of ipfs contentId count\",\"size\":\"ipfs contentId size\",\"token\":\"ERC20 token\"}},\"insertMult(address,string[],uint256[],uint256[])\":{\"details\":\"insert multiple ipfs contentId for accounts\",\"params\":{\"contentIds\":\"array of ipfs contentIds\",\"expirations\":\"array of ipfs contentId expirations\",\"sizes\":\"array of ipfs contentId size\",\"token\":\"ERC20 token\"}},\"remove(string)\":{\"details\":\"remove ipfs contentId\",\"params\":{\"contentId\":\"ipfs contentId id\"}},\"removeMult(string[])\":{\"details\":\"remove ipfs contentId\",\"params\":{\"contentIds\":\"array of ipfs contentIds\"}},\"updateExpiration(address,string,uint256)\":{\"details\":\"update extra expiration for ipfs contentId\",\"params\":{\"contentId\":\"ipfs contentId\",\"extraExpiration\":\"ipfs contentId extra expiration\",\"token\":\"ERC20 token\"}},\"updateExpirationMult(address,string[],uint256[])\":{\"details\":\"update multiple extra expirations for ipfs contentId\",\"params\":{\"contentIds\":\"array of ipfs contentIds\",\"extraExpirations\":\"array of ipfs contentId extra expirations\",\"token\":\"ERC20 token\"}},\"updateSize(address,string,uint256)\":{\"details\":\"update extra size for ipfs contentId\",\"params\":{\"contentId\":\"ipfs contentId\",\"extraSize\":\"ipfs contentId extra size\",\"token\":\"ERC20 token\"}},\"updateSizeMult(address,string[],uint256[])\":{\"details\":\"insert multiple ipfs contentId for accounts\",\"params\":{\"contentIds\":\"array of ipfs contentIds\",\"extraSizes\":\"array of ipfs contentId extra size\",\"token\":\"ERC20 token\"}}},\"stateVariables\":{\"metas\":{\"details\":\"ipfs contentId contentId meta\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ContentIDRegistry.sol\":\"ContentIDRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"contracts/ContentIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.4;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IPriceAdaptor.sol';\\n\\n/// @author Alexandas\\n/// @dev IPFS content id registry\\ncontract ContentIDRegistry is Initializable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\tstruct ContentMeta {\\n\\t\\tuint256 size;\\n\\t\\tuint256 expiration;\\n\\t\\tuint256 updateAt;\\n\\t}\\n\\n\\tIPriceAdaptor public priceAdaptor;\\n\\n\\tIERC20[] public tokens;\\n\\n\\t// token -> decimals\\n\\tmapping(IERC20 => uint256) public tokenDecimals;\\n\\n\\t/// @dev ipfs contentId contentId meta\\n    mapping(address => mapping(string => ContentMeta)) public metas;\\n\\n\\t/// @dev emit when ipfs contentId inserted or updated\\n\\t/// @param account user account\\n\\t/// @param contentId ipfs contentId\\n\\t/// @param size ipfs contentId size\\n\\t/// @param expiration ipfs contentId expiration\\n\\tevent Upset(address account, string contentId, uint256 size, uint256 expiration);\\n\\n\\t/// @dev emit when ipfs contentId removed\\n\\t/// @param account user account\\n\\t/// @param contentId ipfs contentId\\n\\tevent Remove(address account, string contentId);\\n\\n    constructor() initializer {}\\n\\n\\t/// @dev proxy initialize function\\n\\tfunction initialize(IPriceAdaptor _priceAdaptor, IERC20 token, uint256 decimals) external initializer {\\n\\t\\tpriceAdaptor = _priceAdaptor;\\n\\t\\t_addToken(token, decimals);\\n\\t}\\n\\n\\tfunction tokenLength() public view returns(uint256) {\\n\\t\\treturn tokens.length;\\n\\t}\\n\\n\\tfunction _addToken(IERC20 token, uint256 decimals) internal {\\n\\t\\trequire(tokenDecimals[token] == 0, 'ContentIDRegistry: token exists');\\n\\t\\ttokenDecimals[token] = decimals;\\n\\t\\ttokens.push(token);\\n\\t}\\n\\n\\t/// @dev insert multiple ipfs contentId for accounts\\n\\t/// @param token ERC20 token\\n\\t/// @param contentIds array of ipfs contentIds\\n\\t/// @param sizes array of ipfs contentId size\\n    /// @param expirations array of ipfs contentId expirations\\n\\tfunction insertMult(\\n\\t\\tIERC20 token,\\n\\t\\tstring[] memory contentIds,\\n\\t\\tuint256[] memory sizes,\\n        uint256[] memory expirations\\n\\t) external {\\n\\t\\trequire(contentIds.length == sizes.length, 'ContentIDRegistry: invalid parameter length.');\\n\\t\\trequire(contentIds.length == expirations.length, 'ContentIDRegistry: invalid parameter length.');\\n\\t\\tfor (uint256 i = 0; i < contentIds.length; i++) {\\n\\t\\t\\t_insert(token, msg.sender, contentIds[i], sizes[i], expirations[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev insert multiple ipfs contentId for accounts\\n\\t/// @param token ERC20 token\\n\\t/// @param contentIds array of ipfs contentIds\\n\\t/// @param extraSizes array of ipfs contentId extra size\\n\\tfunction updateSizeMult(\\n\\t\\tIERC20 token,\\n\\t\\tstring[] memory contentIds,\\n\\t\\tuint256[] memory extraSizes\\n\\t) external {\\n\\t\\trequire(contentIds.length == extraSizes.length, 'ContentIDRegistry: invalid parameter length.');\\n\\t\\tfor (uint256 i = 0; i < contentIds.length; i++) {\\n\\t\\t\\t_updateSize(token, msg.sender, contentIds[i], extraSizes[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev update multiple extra expirations for ipfs contentId\\n\\t/// @param token ERC20 token\\n\\t/// @param contentIds array of ipfs contentIds\\n    /// @param extraExpirations array of ipfs contentId extra expirations\\n\\tfunction updateExpirationMult(\\n\\t\\tIERC20 token,\\n\\t\\tstring[] memory contentIds,\\n        uint256[] memory extraExpirations\\n\\t) external {\\n\\t\\trequire(contentIds.length == extraExpirations.length, 'ContentIDRegistry: invalid parameter length.');\\n\\t\\tfor (uint256 i = 0; i < contentIds.length; i++) {\\n\\t\\t\\t_updateExpiration(token, msg.sender, contentIds[i], extraExpirations[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev insert ipfs contentId\\n\\t/// @param token ERC20 token\\n\\t/// @param contentId ipfs contentId\\n\\t/// @param size ipfs contentId size\\n    /// @param expiration of ipfs contentId count\\n\\tfunction insert(\\n\\t\\tIERC20 token,\\n\\t\\tstring memory contentId,\\n\\t\\tuint256 size,\\n\\t\\tuint256 expiration\\n\\t) external {\\n\\t\\t_insert(token, msg.sender, contentId, size, expiration);\\n\\t}\\n\\n\\t/// @dev update extra size for ipfs contentId\\n\\t/// @param token ERC20 token\\n\\t/// @param contentId ipfs contentId\\n\\t/// @param extraSize ipfs contentId extra size\\n\\tfunction updateSize(\\n\\t\\tIERC20 token,\\n\\t\\tstring memory contentId,\\n\\t\\tuint256 extraSize\\n\\t) external {\\n\\t\\t_updateSize(token, msg.sender, contentId, extraSize);\\n\\t}\\n\\n\\t/// @dev update extra expiration for ipfs contentId\\n\\t/// @param token ERC20 token\\n\\t/// @param contentId ipfs contentId\\n\\t/// @param extraExpiration ipfs contentId extra expiration\\n\\tfunction updateExpiration(\\n\\t\\tIERC20 token,\\n\\t\\tstring memory contentId,\\n\\t\\tuint256 extraExpiration\\n\\t) external {\\n\\t\\t_updateExpiration(token, msg.sender, contentId, extraExpiration);\\n\\t}\\n\\n\\tfunction _insert(\\n\\t\\tIERC20 token,\\n\\t\\taddress account,\\n\\t\\tstring memory contentId,\\n\\t\\tuint256 size,\\n        uint256 expiration\\n\\t) internal {\\n\\t\\trequire(tokenExists(token), 'ContentIDRegistry: nonexistent token');\\n\\t\\trequire(!exists(account, contentId) || isExpired(account, contentId), 'ContentIDRegistry: contentId exists');\\n\\t\\trequire(size > 0, 'ContentIDRegistry: invalid size');\\n\\t\\trequire(expiration > 0, 'ContentIDRegistry: invalid expiration');\\n\\t\\tuint256 value = priceAdaptor.getValue(size, expiration);\\n\\t\\tvalue = matchValueToDecimals(token, value);\\n\\t\\ttoken.transferFrom(account, address(this), value);\\n\\t\\tmetas[account][contentId] = ContentMeta({\\n\\t\\t\\tsize: size,\\n\\t\\t\\texpiration: expiration,\\n\\t\\t\\tupdateAt: block.timestamp\\n\\t\\t});\\n\\t\\temit Upset(account, contentId, size, expiredAt(account, contentId));\\n\\t}\\n\\n\\tfunction _updateSize(\\n\\t\\tIERC20 token,\\n\\t\\taddress account,\\n\\t\\tstring memory contentId,\\n\\t\\tuint256 extraSize\\n\\t) internal {\\n\\t\\trequire(tokenExists(token), 'ContentIDRegistry: nonexistent token');\\n\\t\\trequire(exists(account, contentId) && !isExpired(account, contentId), 'ContentIDRegistry: nonexistent contentId');\\n\\t\\trequire(extraSize > 0, 'ContentIDRegistry: invalid extra size');\\n\\t\\tuint256 value = priceAdaptor.getValue(extraSize, 1);\\n\\t\\tvalue = matchValueToDecimals(token, value);\\n\\t\\ttoken.transferFrom(account, address(this), value);\\n\\t\\tmetas[account][contentId].size = metas[account][contentId].size.add(extraSize);\\n\\t\\temit Upset(account, contentId, getSize(account, contentId), expiredAt(account, contentId));\\n\\t}\\n\\n\\tfunction _updateExpiration(\\n\\t\\tIERC20 token,\\n\\t\\taddress account,\\n\\t\\tstring memory contentId,\\n\\t\\tuint256 extraExpiration\\n\\t) internal {\\n\\t\\trequire(tokenExists(token), 'ContentIDRegistry: nonexistent token');\\n\\t\\trequire(exists(account, contentId) && !isExpired(account, contentId), 'ContentIDRegistry: nonexistent contentId');\\n\\t\\tuint256 value = priceAdaptor.getValue(extraExpiration, 1);\\n\\t\\tvalue = matchValueToDecimals(token, value);\\n\\t\\ttoken.transferFrom(account, address(this), value);\\n\\t\\tmetas[account][contentId].expiration = metas[account][contentId].expiration.add(extraExpiration);\\n\\t\\temit Upset(account, contentId, getSize(account, contentId), expiredAt(account, contentId));\\n\\t}\\n\\n\\tfunction getSize(address account, string memory contentId) public view returns(uint256) {\\n\\t\\treturn metas[account][contentId].size;\\n\\t}\\n\\n\\tfunction getExpiration(address account, string memory contentId) public view returns(uint256) {\\n\\t\\treturn metas[account][contentId].expiration;\\n\\t}\\n\\n\\tfunction getupdateAt(address account, string memory contentId) public view returns(uint256) {\\n\\t\\treturn metas[account][contentId].updateAt;\\n\\t}\\n\\n\\tfunction exists(address account, string memory contentId) public view returns(bool) {\\n\\t\\treturn metas[account][contentId].size > 0;\\n\\t}\\n\\n\\tfunction expiredAt(address account, string memory contentId) public view returns(uint256) {\\n\\t\\treturn metas[account][contentId].expiration.add(metas[account][contentId].updateAt);\\n\\t}\\n\\n\\tfunction isExpired(address account, string memory contentId) public view returns(bool) {\\n\\t\\treturn expiredAt(account, contentId) >= block.timestamp;\\n\\t}\\n\\n\\t/// @dev remove ipfs contentId\\n\\t/// @param contentIds array of ipfs contentIds\\n\\tfunction removeMult(string[] memory contentIds) external {\\n\\t\\tfor (uint256 i = 0; i < contentIds.length; i++) {\\n\\t\\t\\t_remove(msg.sender, contentIds[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev remove ipfs contentId\\n\\t/// @param contentId ipfs contentId id\\n\\tfunction remove(string memory contentId) external{\\n\\t\\t_remove(msg.sender, contentId);\\n\\t}\\n\\n\\tfunction _remove(\\n\\t\\taddress account,\\n\\t\\tstring memory contentId\\n\\t) internal {\\n\\t\\trequire(exists(account, contentId), 'ContentIDRegistry: nonexistent contentId');\\n\\t\\tdelete metas[account][contentId];\\n\\t\\temit Remove(account, contentId);\\n\\t}\\n\\n\\tfunction tokenExists(IERC20 token) public view returns(bool) {\\n\\t\\treturn tokenDecimals[token] > 0;\\n\\t}\\n\\n\\tfunction matchValueToDecimals(IERC20 token, uint256 value) public view returns(uint256) {\\n\\t\\trequire(tokenExists(token), 'nonexistent token');\\n\\t\\tuint256 decimals = tokenDecimals[token];\\n\\t\\tif (decimals >= 30) {\\n\\t\\t\\treturn value.mul(10 ** (decimals-30));\\n\\t\\t}\\n\\t\\treturn value.div(10 ** (30-decimals));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xd1aaefd6a5fd93b029678b351c1e4502583aa3f5991f51af22dc70cd2932085c\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.4;\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\n\\ninterface IERC20 is IERC20Upgradeable {\\n\\tfunction decimals() external view returns(uint256);\\n}\",\"keccak256\":\"0xc1bdba8258e97a0eb01f80bec617a5556c6408825201e209ccccfd7ea6ccfdc0\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPriceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.4;\\n\\ninterface IPriceAdaptor {\\n\\n\\tevent PriceUpdated(uint256 _price);\\n\\n\\t/// @dev return cost of content with specific content size and expiration\\n\\t/// @param size content size\\n\\t/// @param expiration content expiration\\n\\t/// @return token value in decimals(30)\\n\\tfunction getValue(\\n\\t\\tuint256 size,\\n\\t\\tuint256 expiration\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev get amount resource with value at a specific block\\n\\t/// @param value token value in decimals(30)\\n\\t/// @param expiration content expiration\\n\\t/// @return size content size\\n\\tfunction getSizeWith(\\n\\t\\tuint256 value,\\n\\t\\tuint256 expiration\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev get amount resource with value at a specific block\\n\\t/// @param value token value in decimals(30)\\n\\t/// @param size content size\\n\\t/// @return content expiration\\n\\tfunction getExpirationWith(\\n\\t\\tuint256 value,\\n\\t\\tuint256 size\\n\\t) external view returns (uint256);\\n}\",\"keccak256\":\"0x2c84079a08f8264a9b5aa99ad4e68e9e092dadc2538a2ddb69f16db7528c0e39\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff1615808015620000335750600054600160ff909116105b8062000063575062000050306200010460201b620009321760201c565b15801562000063575060005460ff166001145b6200008b5760405162461bcd60e51b8152600401620000829062000113565b60405180910390fd5b6000805460ff191660011790558015620000af576000805461ff0019166101001790555b8015620000fd576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890620000f49060019062000189565b60405180910390a15b5062000199565b6001600160a01b03163b151590565b602080825281016200016681602e81527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160208201526d191e481a5b9a5d1a585b1a5e995960921b604082015260600190565b92915050565b600060ff821662000166565b62000183816200016c565b82525050565b6020810162000166828462000178565b611f7f80620001a96000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063775a4cb0116100b8578063934e5b891161007c578063934e5b89146103035780639caf681d14610316578063b31bdec414610329578063b33f78ca1461033c578063d8999bdf14610367578063de66341e1461037a57600080fd5b8063775a4cb01461028a57806380599e4b146102aa57806383e89197146102bd578063877e71d2146102d05780638ee573ac146102e357600080fd5b80631d124ece1161010a5780631d124ece146101d1578063298468a7146101e457806337e491c9146101f75780634f64b2be1461020a57806359779f191461021d57806375190dd11461023057600080fd5b806305ee43f614610147578063064146181461015c57806309be8e1d1461016f5780631266cc06146101985780631794bb3c146101be575b600080fd5b61015a610155366004611381565b610382565b005b61015a61016a366004611407565b6103c7565b61018261017d366004611499565b6103da565b60405161018f91906114f8565b60405180910390f35b6000546101b1906201000090046001600160a01b031681565b60405161018f9190611548565b61015a6101cc366004611556565b610419565b6101826101df366004611499565b610517565b61015a6101f236600461161b565b610557565b610182610205366004611499565b610616565b6101b16102183660046116c1565b6106a6565b61015a61022b3660046116e2565b6106d0565b61027b61023e366004611499565b6003602090815260009283526040909220815180830184018051928152908401929093019190912091528054600182015460029092015490919083565b60405161018f93929190611731565b61029d610298366004611499565b6106e1565b60405161018f9190611761565b61015a6102b836600461176f565b610723565b6101826102cb3660046117a9565b610730565b61015a6102de3660046117dc565b6107d6565b6101826102f1366004611856565b60026020526000908152604090205481565b61015a6103113660046117dc565b610853565b61015a6103243660046116e2565b6108d0565b610182610337366004611499565b6108dc565b61029d61034a366004611856565b6001600160a01b0316600090815260026020526040902054151590565b61029d610375366004611499565b61091c565b600154610182565b60005b81518110156103c3576103b1338383815181106103a4576103a4611877565b6020026020010151610941565b806103bb816118a3565b915050610385565b5050565b6103d484338585856109ea565b50505050565b6001600160a01b038216600090815260036020526040808220905161040090849061190c565b9081526040519081900360200190205490505b92915050565b600054610100900460ff16158080156104395750600054600160ff909116105b806104535750303b158015610453575060005460ff166001145b6104785760405162461bcd60e51b815260040161046f90611966565b60405180910390fd5b6000805460ff19166001179055801561049b576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b038716021790556104c78383610c7b565b80156103d4576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906105099060019061198a565b60405180910390a150505050565b6001600160a01b038216600090815260036020526040808220905161053d90849061190c565b908152602001604051809103902060020154905092915050565b81518351146105785760405162461bcd60e51b815260040161046f906119e1565b80518351146105995760405162461bcd60e51b815260040161046f906119e1565b60005b835181101561060f576105fd85338684815181106105bc576105bc611877565b60200260200101518685815181106105d6576105d6611877565b60200260200101518686815181106105f0576105f0611877565b60200260200101516109ea565b80610607816118a3565b91505061059c565b5050505050565b6001600160a01b038216600090815260036020526040808220905161069f919061064190859061190c565b90815260200160405180910390206002015460036000866001600160a01b03166001600160a01b0316815260200190815260200160002084604051610686919061190c565b9081526040519081900360200190206001015490610d10565b9392505050565b600181815481106106b657600080fd5b6000918252602090912001546001600160a01b0316905081565b6106dc83338484610d1c565b505050565b6001600160a01b038216600090815260036020526040808220905182919061070a90859061190c565b9081526040519081900360200190205411905092915050565b61072d3382610941565b50565b6001600160a01b0382166000908152600260205260408120546107655760405162461bcd60e51b815260040161046f90611a1c565b6001600160a01b038316600090815260026020526040902054601e81106107ae576107a6610794601e83611a2c565b61079f90600a611b51565b8490610f62565b915050610413565b6107ce6107bc82601e611a2c565b6107c790600a611b51565b8490610f6e565b949350505050565b80518251146107f75760405162461bcd60e51b815260040161046f906119e1565b60005b82518110156103d457610841843385848151811061081a5761081a611877565b602002602001015185858151811061083457610834611877565b6020026020010151610d1c565b8061084b816118a3565b9150506107fa565b80518251146108745760405162461bcd60e51b815260040161046f906119e1565b60005b82518110156103d4576108be843385848151811061089757610897611877565b60200260200101518585815181106108b1576108b1611877565b6020026020010151610f7a565b806108c8816118a3565b915050610877565b6106dc83338484610f7a565b6001600160a01b038216600090815260036020526040808220905161090290849061190c565b908152602001604051809103902060010154905092915050565b6000426109298484610616565b10159392505050565b6001600160a01b03163b151590565b61094b82826106e1565b6109675760405162461bcd60e51b815260040161046f90611ba5565b6001600160a01b03821660009081526003602052604090819020905161098e90839061190c565b9081526040519081900360200181206000808255600182018190556002909101557fafb58637702ac59f4ec776bf00731c6db5de2befbf39779a2c5be4922201bb0e906109de9084908490611bf0565b60405180910390a15050565b6001600160a01b038516600090815260026020526040902054610a1f5760405162461bcd60e51b815260040161046f90611c51565b610a2984846106e1565b1580610a3a5750610a3a848461091c565b610a565760405162461bcd60e51b815260040161046f90611ca1565b60008211610a765760405162461bcd60e51b815260040161046f90611ce5565b60008111610a965760405162461bcd60e51b815260040161046f90611d37565b6000805460405163350cf36f60e11b8152620100009091046001600160a01b031690636a19e6de90610ace9086908690600401611d47565b60206040518083038186803b158015610ae657600080fd5b505afa158015610afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1e9190611d6d565b9050610b2a8682610730565b6040516323b872dd60e01b81529091506001600160a01b038716906323b872dd90610b5d90889030908690600401611d8e565b602060405180830381600087803b158015610b7757600080fd5b505af1158015610b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baf9190611dbc565b5060405180606001604052808481526020018381526020014281525060036000876001600160a01b03166001600160a01b0316815260200190815260200160002085604051610bfe919061190c565b90815260200160405180910390206000820151816000015560208201518160010155604082015181600201559050507f4471eb362c285c1ce8c27b53fa652555ee6b39467a3108f2024529852e38accf858585610c5b8989610616565b604051610c6b9493929190611ddd565b60405180910390a1505050505050565b6001600160a01b03821660009081526002602052604090205415610cb15760405162461bcd60e51b815260040161046f90611e56565b6001600160a01b0390911660008181526002602052604081209290925560018054808201825592527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690910180546001600160a01b0319169091179055565b600061069f8284611e66565b6001600160a01b038416600090815260026020526040902054610d515760405162461bcd60e51b815260040161046f90611c51565b610d5b83836106e1565b8015610d6e5750610d6c838361091c565b155b610d8a5760405162461bcd60e51b815260040161046f90611ba5565b6000805460405163350cf36f60e11b8152620100009091046001600160a01b031690636a19e6de90610dc3908590600190600401611e93565b60206040518083038186803b158015610ddb57600080fd5b505afa158015610def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e139190611d6d565b9050610e1f8582610730565b6040516323b872dd60e01b81529091506001600160a01b038616906323b872dd90610e5290879030908690600401611d8e565b602060405180830381600087803b158015610e6c57600080fd5b505af1158015610e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea49190611dbc565b506001600160a01b038416600090815260036020526040908190209051610ed291849161068690879061190c565b6001600160a01b038516600090815260036020526040908190209051610ef990869061190c565b908152604051908190036020019020600101557f4471eb362c285c1ce8c27b53fa652555ee6b39467a3108f2024529852e38accf8484610f3982826103da565b610f438888610616565b604051610f539493929190611ddd565b60405180910390a15050505050565b600061069f8284611eae565b600061069f8284611ee3565b6001600160a01b038416600090815260026020526040902054610faf5760405162461bcd60e51b815260040161046f90611c51565b610fb983836106e1565b8015610fcc5750610fca838361091c565b155b610fe85760405162461bcd60e51b815260040161046f90611ba5565b600081116110085760405162461bcd60e51b815260040161046f90611f39565b6000805460405163350cf36f60e11b8152620100009091046001600160a01b031690636a19e6de90611041908590600190600401611e93565b60206040518083038186803b15801561105957600080fd5b505afa15801561106d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110919190611d6d565b905061109d8582610730565b6040516323b872dd60e01b81529091506001600160a01b038616906323b872dd906110d090879030908690600401611d8e565b602060405180830381600087803b1580156110ea57600080fd5b505af11580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111229190611dbc565b506001600160a01b03841660009081526003602052604090819020905161116691849161115090879061190c565b9081526040519081900360200190205490610d10565b6001600160a01b03851660009081526003602052604090819020905161118d90869061190c565b908152604051908190036020019020557f4471eb362c285c1ce8c27b53fa652555ee6b39467a3108f2024529852e38accf8484610f3982826103da565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715611205576112056111ca565b6040525050565b600061121760405190565b905061122382826111e0565b919050565b60006001600160401b03821115611241576112416111ca565b5060209081020190565b60006001600160401b03821115611264576112646111ca565b601f19601f83011660200192915050565b82818337506000910152565b600061129461128f8461124b565b61120c565b9050828152602081018484840111156112af576112af600080fd5b6112ba848285611275565b509392505050565b600082601f8301126112d6576112d6600080fd5b81356107ce848260208601611281565b60006112f461128f84611228565b8381529050602080820190840283018581111561131357611313600080fd5b835b818110156113535780356001600160401b0381111561133657611336600080fd5b80860161134389826112c2565b8552505060209283019201611315565b5050509392505050565b600082601f83011261137157611371600080fd5b81356107ce8482602086016112e6565b60006020828403121561139657611396600080fd5b81356001600160401b038111156113af576113af600080fd5b6107ce8482850161135d565b60006001600160a01b038216610413565b6000610413826113bb565b6113e0816113cc565b811461072d57600080fd5b8035610413816113d7565b806113e0565b8035610413816113f6565b6000806000806080858703121561142057611420600080fd5b600061142c87876113eb565b94505060208501356001600160401b0381111561144b5761144b600080fd5b611457878288016112c2565b9350506040611468878288016113fc565b9250506060611479878288016113fc565b91505092959194509250565b6113e0816113bb565b803561041381611485565b600080604083850312156114af576114af600080fd5b60006114bb858561148e565b92505060208301356001600160401b038111156114da576114da600080fd5b6114e6858286016112c2565b9150509250929050565b805b82525050565b6020810161041382846114f0565b60006104136001600160a01b03831661151d565b90565b6001600160a01b031690565b600061041382611506565b600061041382611529565b6114f281611534565b60208101610413828461153f565b60008060006060848603121561156e5761156e600080fd5b600061157a86866113eb565b935050602061158b868287016113eb565b925050604061159c868287016113fc565b9150509250925092565b60006115b461128f84611228565b838152905060208082019084028301858111156115d3576115d3600080fd5b835b8181101561135357806115e888826113fc565b845250602092830192016115d5565b600082601f83011261160b5761160b600080fd5b81356107ce8482602086016115a6565b6000806000806080858703121561163457611634600080fd5b600061164087876113eb565b94505060208501356001600160401b0381111561165f5761165f600080fd5b61166b8782880161135d565b93505060408501356001600160401b0381111561168a5761168a600080fd5b611696878288016115f7565b92505060608501356001600160401b038111156116b5576116b5600080fd5b611479878288016115f7565b6000602082840312156116d6576116d6600080fd5b60006107ce84846113fc565b6000806000606084860312156116fa576116fa600080fd5b600061170686866113eb565b93505060208401356001600160401b0381111561172557611725600080fd5b61158b868287016112c2565b6060810161173f82866114f0565b61174c60208301856114f0565b6107ce60408301846114f0565b8015156114f2565b602081016104138284611759565b60006020828403121561178457611784600080fd5b81356001600160401b0381111561179d5761179d600080fd5b6107ce848285016112c2565b600080604083850312156117bf576117bf600080fd5b60006117cb85856113eb565b92505060206114e6858286016113fc565b6000806000606084860312156117f4576117f4600080fd5b600061180086866113eb565b93505060208401356001600160401b0381111561181f5761181f600080fd5b61182b8682870161135d565b92505060408401356001600160401b0381111561184a5761184a600080fd5b61159c868287016115f7565b60006020828403121561186b5761186b600080fd5b60006107ce84846113eb565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156118b7576118b761188d565b5060010190565b60005b838110156118d95781810151838201526020016118c1565b838111156103d45750506000910152565b60006118f4825190565b6119028185602086016118be565b9290920192915050565b600061069f82846118ea565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291505b5060400190565b6020808252810161041381611918565b600060ff8216610413565b6114f281611976565b602081016104138284611981565b602c81526000602082017f436f6e74656e74494452656769737472793a20696e76616c696420706172616d81526b32ba32b9103632b733ba341760a11b6020820152915061195f565b6020808252810161041381611998565b60118152600060208201703737b732bc34b9ba32b73a103a37b5b2b760791b815291505b5060200190565b60208082528101610413816119f1565b600082821015611a3e57611a3e61188d565b500390565b80825b6001851115611a8257808604811115611a6157611a6161188d565b6001851615611a6f57908102905b8002611a7b8560011c90565b9450611a46565b94509492505050565b600082611a9a5750600161069f565b81611aa75750600061069f565b8160018114611abd5760028114611ac757611af4565b600191505061069f565b60ff841115611ad857611ad861188d565b8360020a915084821115611aee57611aee61188d565b5061069f565b5060208310610133831016604e8410600b8410161715611b27575081810a83811115611b2257611b2261188d565b61069f565b611b348484846001611a43565b92509050818404811115611b4a57611b4a61188d565b0292915050565b600061069f6000198484611a8b565b602881526000602082017f436f6e74656e74494452656769737472793a206e6f6e6578697374656e7420638152671bdb9d195b9d125960c21b6020820152915061195f565b6020808252810161041381611b60565b6114f2816113bb565b6000611bc8825190565b808452602084019350611bdf8185602086016118be565b601f01601f19169290920192915050565b60408101611bfe8285611bb5565b81810360208301526107ce8184611bbe565b602481526000602082017f436f6e74656e74494452656769737472793a206e6f6e6578697374656e74207481526337b5b2b760e11b6020820152915061195f565b6020808252810161041381611c10565b602381526000602082017f436f6e74656e74494452656769737472793a20636f6e74656e7449642065786981526273747360e81b6020820152915061195f565b6020808252810161041381611c61565b601f81526000602082017f436f6e74656e74494452656769737472793a20696e76616c69642073697a650081529150611a15565b6020808252810161041381611cb1565b602581526000602082017f436f6e74656e74494452656769737472793a20696e76616c696420657870697281526430ba34b7b760d91b6020820152915061195f565b6020808252810161041381611cf5565b60408101611d5582856114f0565b61069f60208301846114f0565b8051610413816113f6565b600060208284031215611d8257611d82600080fd5b60006107ce8484611d62565b60608101611d9c8286611bb5565b61174c6020830185611bb5565b8015156113e0565b805161041381611da9565b600060208284031215611dd157611dd1600080fd5b60006107ce8484611db1565b60808101611deb8287611bb5565b8181036020830152611dfd8186611bbe565b9050611e0c60408301856114f0565b611e1960608301846114f0565b95945050505050565b601f81526000602082017f436f6e74656e74494452656769737472793a20746f6b656e206578697374730081529150611a15565b6020808252810161041381611e22565b60008219821115611e7957611e7961188d565b500190565b600061041361151a8381565b6114f281611e7e565b60408101611ea182856114f0565b61069f6020830184611e8a565b6000816000190483118215151615611ec857611ec861188d565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611ef257611ef2611ecd565b500490565b602581526000602082017f436f6e74656e74494452656769737472793a20696e76616c69642065787472618152642073697a6560d81b6020820152915061195f565b6020808252810161041381611ef756fea26469706673582212204dcdc2423c2721e1ecdbea172236bbb02f9a645219716a52e8df8163fbb30d2164736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Alexandas",
    "details": "IPFS content id registry",
    "events": {
      "Remove(address,string)": {
        "details": "emit when ipfs contentId removed",
        "params": {
          "account": "user account",
          "contentId": "ipfs contentId"
        }
      },
      "Upset(address,string,uint256,uint256)": {
        "details": "emit when ipfs contentId inserted or updated",
        "params": {
          "account": "user account",
          "contentId": "ipfs contentId",
          "expiration": "ipfs contentId expiration",
          "size": "ipfs contentId size"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "initialize(address,address,uint256)": {
        "details": "proxy initialize function"
      },
      "insert(address,string,uint256,uint256)": {
        "details": "insert ipfs contentId",
        "params": {
          "contentId": "ipfs contentId",
          "expiration": "of ipfs contentId count",
          "size": "ipfs contentId size",
          "token": "ERC20 token"
        }
      },
      "insertMult(address,string[],uint256[],uint256[])": {
        "details": "insert multiple ipfs contentId for accounts",
        "params": {
          "contentIds": "array of ipfs contentIds",
          "expirations": "array of ipfs contentId expirations",
          "sizes": "array of ipfs contentId size",
          "token": "ERC20 token"
        }
      },
      "remove(string)": {
        "details": "remove ipfs contentId",
        "params": {
          "contentId": "ipfs contentId id"
        }
      },
      "removeMult(string[])": {
        "details": "remove ipfs contentId",
        "params": {
          "contentIds": "array of ipfs contentIds"
        }
      },
      "updateExpiration(address,string,uint256)": {
        "details": "update extra expiration for ipfs contentId",
        "params": {
          "contentId": "ipfs contentId",
          "extraExpiration": "ipfs contentId extra expiration",
          "token": "ERC20 token"
        }
      },
      "updateExpirationMult(address,string[],uint256[])": {
        "details": "update multiple extra expirations for ipfs contentId",
        "params": {
          "contentIds": "array of ipfs contentIds",
          "extraExpirations": "array of ipfs contentId extra expirations",
          "token": "ERC20 token"
        }
      },
      "updateSize(address,string,uint256)": {
        "details": "update extra size for ipfs contentId",
        "params": {
          "contentId": "ipfs contentId",
          "extraSize": "ipfs contentId extra size",
          "token": "ERC20 token"
        }
      },
      "updateSizeMult(address,string[],uint256[])": {
        "details": "insert multiple ipfs contentId for accounts",
        "params": {
          "contentIds": "array of ipfs contentIds",
          "extraSizes": "array of ipfs contentId extra size",
          "token": "ERC20 token"
        }
      }
    },
    "stateVariables": {
      "metas": {
        "details": "ipfs contentId contentId meta"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 141,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 144,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2872,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "priceAdaptor",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IPriceAdaptor)3929"
      },
      {
        "astId": 2876,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "tokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(IERC20)3892)dyn_storage"
      },
      {
        "astId": 2881,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "tokenDecimals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IERC20)3892,t_uint256)"
      },
      {
        "astId": 2889,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "metas",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(ContentMeta)2869_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)3892)dyn_storage": {
        "base": "t_contract(IERC20)3892",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3892": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceAdaptor)3929": {
        "encoding": "inplace",
        "label": "contract IPriceAdaptor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(ContentMeta)2869_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => struct ContentIDRegistry.ContentMeta))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(ContentMeta)2869_storage)"
      },
      "t_mapping(t_contract(IERC20)3892,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)3892",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_struct(ContentMeta)2869_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct ContentIDRegistry.ContentMeta)",
        "numberOfBytes": "32",
        "value": "t_struct(ContentMeta)2869_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ContentMeta)2869_storage": {
        "encoding": "inplace",
        "label": "struct ContentIDRegistry.ContentMeta",
        "members": [
          {
            "astId": 2864,
            "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2866,
            "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
            "label": "expiration",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2868,
            "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
            "label": "updateAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}