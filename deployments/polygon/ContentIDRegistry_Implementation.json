{
  "address": "0x34E9D53F0DF4298C1E407189fE9215006D91Bb2D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "AddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "Remove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RemoveToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiredAt",
          "type": "uint256"
        }
      ],
      "name": "Upset",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "availableExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "expand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "expiredAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "getExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "getSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "getValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "contract IPriceAdaptor",
          "name": "_priceAdaptor",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "insert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "contentIds",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "expirations",
          "type": "uint256[]"
        }
      ],
      "name": "insertMult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "isExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "metas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceAdaptor",
      "outputs": [
        {
          "internalType": "contract IPriceAdaptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "contentIds",
          "type": "string[]"
        }
      ],
      "name": "removeMult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "renew",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tokenExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe5d7308d53a38977110f56ceb897ec88497788a583dcc87abf50bfadab5af06f",
  "receipt": {
    "to": null,
    "from": "0xe5bab2D79EB833FA25906Cd90540339C9aB8AE70",
    "contractAddress": "0x34E9D53F0DF4298C1E407189fE9215006D91Bb2D",
    "transactionIndex": 72,
    "gasUsed": "1767340",
    "logsBloom": "0x
    "blockHash": "0x55fb5cf586e318f28bac3c8376fcb72c8609b2496b25b4a9822a235fdf4a9eb4",
    "transactionHash": "0xe5d7308d53a38977110f56ceb897ec88497788a583dcc87abf50bfadab5af06f",
    "logs": [
      {
        "transactionIndex": 72,
        "blockNumber": 37892396,
        "transactionHash": "0xe5d7308d53a38977110f56ceb897ec88497788a583dcc87abf50bfadab5af06f",
        "address": "0x34E9D53F0DF4298C1E407189fE9215006D91Bb2D",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 492,
        "blockHash": "0x55fb5cf586e318f28bac3c8376fcb72c8609b2496b25b4a9822a235fdf4a9eb4"
      },
      {
        "transactionIndex": 72,
        "blockNumber": 37892396,
        "transactionHash": "0xe5d7308d53a38977110f56ceb897ec88497788a583dcc87abf50bfadab5af06f",
        "address": "0x34E9D53F0DF4298C1E407189fE9215006D91Bb2D",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 493,
        "blockHash": "0x55fb5cf586e318f28bac3c8376fcb72c8609b2496b25b4a9822a235fdf4a9eb4"
      },
      {
        "transactionIndex": 72,
        "blockNumber": 37892396,
        "transactionHash": "0xe5d7308d53a38977110f56ceb897ec88497788a583dcc87abf50bfadab5af06f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e5bab2d79eb833fa25906cd90540339c9ab8ae70",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000bd246c54bb2644000000000000000000000000000000000000000000000000074305c216f7531f000000000000000000000000000000000000000000009f2c799ce4ca62a4b0740000000000000000000000000000000000000000000000000685e155c23c2cdb000000000000000000000000000000000000000000009f2c7a5a0936b75fd6b8",
        "logIndex": 494,
        "blockHash": "0x55fb5cf586e318f28bac3c8376fcb72c8609b2496b25b4a9822a235fdf4a9eb4"
      }
    ],
    "blockNumber": 37892396,
    "cumulativeGasUsed": "17390738",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0c63128b82e2eeef5fa7b6f6d9473b99",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RemoveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"}],\"name\":\"Upset\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"availableExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"expand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"expiredAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"getExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"getSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract IPriceAdaptor\",\"name\":\"_priceAdaptor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"contentIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"expirations\",\"type\":\"uint256[]\"}],\"name\":\"insertMult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"metas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAdaptor\",\"outputs\":[{\"internalType\":\"contract IPriceAdaptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"contentIds\",\"type\":\"string[]\"}],\"name\":\"removeMult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alexandas\",\"details\":\"IPFS content id registry\",\"events\":{\"Remove(address,string)\":{\"details\":\"emit when ipfs contentId removed\",\"params\":{\"account\":\"user account\",\"contentId\":\"ipfs contentId\"}},\"Upset(address,string,uint256,uint256)\":{\"details\":\"emit when ipfs contentId inserted or updated\",\"params\":{\"account\":\"user account\",\"contentId\":\"ipfs contentId\",\"expiredAt\":\"ipfs contentId expiredAt\",\"size\":\"ipfs contentId size\"}}},\"kind\":\"dev\",\"methods\":{\"expand(address,string,uint256)\":{\"details\":\"renew ipfs contentId\",\"params\":{\"contentId\":\"ipfs contentId\",\"size\":\"of ipfs contentId\",\"token\":\"ERC20 token\"}},\"initialize(address,address,address)\":{\"details\":\"proxy initialize function\"},\"insert(address,string,uint256,uint256)\":{\"details\":\"insert ipfs contentId\",\"params\":{\"contentId\":\"ipfs contentId\",\"expiration\":\"of ipfs contentId\",\"size\":\"ipfs contentId size\",\"token\":\"ERC20 token\"}},\"insertMult(address,string[],uint256[],uint256[])\":{\"details\":\"insert multiple ipfs contentId for accounts\",\"params\":{\"contentIds\":\"array of ipfs contentIds\",\"expirations\":\"array of ipfs contentId expirations\",\"sizes\":\"array of ipfs contentId size\",\"token\":\"ERC20 token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"remove(string)\":{\"details\":\"remove ipfs contentId\",\"params\":{\"contentId\":\"ipfs contentId id\"}},\"removeMult(string[])\":{\"details\":\"remove ipfs contentId\",\"params\":{\"contentIds\":\"array of ipfs contentIds\"}},\"renew(address,string,uint256)\":{\"details\":\"renew ipfs contentId\",\"params\":{\"contentId\":\"ipfs contentId\",\"expiration\":\"of ipfs contentId\",\"token\":\"ERC20 token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"metas\":{\"details\":\"ipfs contentId contentId meta\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ContentIDRegistry.sol\":\"ContentIDRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"contracts/ContentIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.4;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport './PayTokens.sol';\\nimport './interfaces/IPriceAdaptor.sol';\\n\\n/// @author Alexandas\\n/// @dev IPFS content id registry\\ncontract ContentIDRegistry is PayTokens {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\tstruct ContentMeta {\\n\\t\\tuint256 size;\\n\\t\\tuint256 expiration;\\n\\t\\tuint256 createAt;\\n\\t}\\n\\n\\tIPriceAdaptor public priceAdaptor;\\n\\n\\t/// @dev ipfs contentId contentId meta\\n\\tmapping(address => mapping(string => ContentMeta)) public metas;\\n\\n\\t/// @dev emit when ipfs contentId inserted or updated\\n\\t/// @param account user account\\n\\t/// @param contentId ipfs contentId\\n\\t/// @param size ipfs contentId size\\n\\t/// @param expiredAt ipfs contentId expiredAt\\n\\tevent Upset(address account, string contentId, uint256 size, uint256 expiredAt);\\n\\n\\t/// @dev emit when ipfs contentId removed\\n\\t/// @param account user account\\n\\t/// @param contentId ipfs contentId\\n\\tevent Remove(address account, string contentId);\\n\\n    constructor() initializer {}\\n\\n\\t/// @dev proxy initialize function\\n\\tfunction initialize(address admin, IPriceAdaptor _priceAdaptor, IERC20 token) external initializer {\\n\\t\\tpriceAdaptor = _priceAdaptor;\\n\\t\\t__Init_Pay_Token(admin, token);\\n\\t}\\n\\n\\t/// @dev insert multiple ipfs contentId for accounts\\n\\t/// @param token ERC20 token\\n\\t/// @param contentIds array of ipfs contentIds\\n\\t/// @param sizes array of ipfs contentId size\\n    /// @param expirations array of ipfs contentId expirations\\n\\tfunction insertMult(\\n\\t\\tIERC20 token,\\n\\t\\tstring[] memory contentIds,\\n\\t\\tuint256[] memory sizes,\\n        uint256[] memory expirations\\n\\t) external {\\n\\t\\trequire(contentIds.length == sizes.length, 'ContentIDRegistry: invalid parameter length.');\\n\\t\\trequire(contentIds.length == expirations.length, 'ContentIDRegistry: invalid parameter length.');\\n\\t\\tfor (uint256 i = 0; i < contentIds.length; i++) {\\n\\t\\t\\t_insert(token, msg.sender, msg.sender, contentIds[i], sizes[i], expirations[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev insert ipfs contentId\\n\\t/// @param token ERC20 token\\n\\t/// @param contentId ipfs contentId\\n\\t/// @param size ipfs contentId size\\n    /// @param expiration of ipfs contentId\\n\\tfunction insert(\\n\\t\\tIERC20 token,\\n\\t\\tstring memory contentId,\\n\\t\\tuint256 size,\\n\\t\\tuint256 expiration\\n\\t) external {\\n\\t\\t_insert(token, msg.sender, msg.sender, contentId, size, expiration);\\n\\t}\\n\\n\\tfunction _insert(\\n\\t\\tIERC20 token,\\n\\t\\taddress from,\\n\\t\\taddress account,\\n\\t\\tstring memory contentId,\\n\\t\\tuint256 size,\\n        uint256 expiration\\n\\t) internal {\\n\\t\\trequire(tokenExists(token), 'ContentIDRegistry: nonexistent token');\\n\\t\\trequire(!exists(account, contentId) || isExpired(account, contentId), 'ContentIDRegistry: contentId exists or nonexpired contentId');\\n\\t\\trequire(size > 0 || expiration > 0, 'ContentIDRegistry: invalid params');\\n\\t\\tuint256 value = getValue(token, size, expiration);\\n\\t\\ttoken.transferFrom(from, address(this), value);\\n\\t\\tmetas[account][contentId] = ContentMeta({\\n\\t\\t\\tsize: size,\\n\\t\\t\\texpiration: expiration,\\n\\t\\t\\tcreateAt: block.timestamp\\n\\t\\t});\\n\\t\\temit Upset(account, contentId, size, expiredAt(account, contentId));\\n\\t}\\n\\n\\t/// @dev renew ipfs contentId\\n\\t/// @param token ERC20 token\\n\\t/// @param contentId ipfs contentId\\n    /// @param expiration of ipfs contentId\\n\\tfunction renew(\\n\\t\\tIERC20 token,\\n\\t\\tstring memory contentId,\\n        uint256 expiration\\n\\t) external {\\n\\t\\t_renew(token, msg.sender, msg.sender, contentId, expiration);\\n\\t}\\n\\n\\tfunction _renew(\\n\\t\\tIERC20 token,\\n\\t\\taddress from,\\n\\t\\taddress account,\\n\\t\\tstring memory contentId,\\n        uint256 expiration\\n\\t) internal {\\n\\t\\trequire(tokenExists(token), 'ContentIDRegistry: nonexistent token');\\n\\t\\trequire(exists(account, contentId), 'ContentIDRegistry: nonexistent contentId');\\n\\t\\trequire(!isExpired(account, contentId), 'ContentIDRegistry: contentId expired');\\n\\t\\trequire(expiration > 0, 'ContentIDRegistry: invalid content expiration');\\n\\t\\tuint256 size = getSize(account, contentId);\\n\\t\\tuint256 value = getValue(token, size, expiration);\\n\\t\\ttoken.transferFrom(from, address(this), value);\\n\\t\\tmetas[account][contentId].expiration = expiration.add(getExpiration(account, contentId));\\n\\t\\temit Upset(account, contentId, size, expiredAt(account, contentId));\\n\\t}\\n\\n\\t/// @dev renew ipfs contentId\\n\\t/// @param token ERC20 token\\n\\t/// @param contentId ipfs contentId\\n    /// @param size of ipfs contentId\\n\\tfunction expand(\\n\\t\\tIERC20 token,\\n\\t\\tstring memory contentId,\\n        uint256 size\\n\\t) external {\\n\\t\\t_expand(token, msg.sender, msg.sender, contentId, size);\\n\\t}\\n\\n\\tfunction _expand(\\n\\t\\tIERC20 token,\\n\\t\\taddress from,\\n\\t\\taddress account,\\n\\t\\tstring memory contentId,\\n        uint256 size\\n\\t) internal {\\n\\t\\trequire(tokenExists(token), 'ContentIDRegistry: nonexistent token');\\n\\t\\trequire(size > 0, 'ContentIDRegistry: invalid content size');\\n\\t\\tuint256 exp = availableExpiration(account, contentId);\\n\\t\\tuint256 value = getValue(token, size, exp);\\n\\t\\ttoken.transferFrom(from, address(this), value);\\n\\t\\tmetas[account][contentId].size = metas[account][contentId].size.add(size);\\n\\t\\temit Upset(account, contentId, metas[account][contentId].size, expiredAt(account, contentId));\\n\\t}\\n\\n\\tfunction getSize(address account, string memory contentId) public view returns(uint256) {\\n\\t\\treturn metas[account][contentId].size;\\n\\t}\\n\\n\\tfunction getExpiration(address account, string memory contentId) public view returns(uint256) {\\n\\t\\treturn metas[account][contentId].expiration;\\n\\t}\\n\\n\\tfunction exists(address account, string memory contentId) public view returns(bool) {\\n\\t\\treturn metas[account][contentId].size > 0;\\n\\t}\\n\\n\\tfunction expiredAt(address account, string memory contentId) public view returns(uint256) {\\n\\t\\trequire(exists(account, contentId), 'ContentIDRegistry: nonexistent contentId');\\n\\t\\treturn metas[account][contentId].expiration.add(metas[account][contentId].createAt);\\n\\t}\\n\\n\\tfunction availableExpiration(address account, string memory contentId) public view returns(uint256) {\\n\\t\\trequire(exists(account, contentId), 'ContentIDRegistry: nonexistent contentId');\\n\\t\\trequire(!isExpired(account, contentId), 'ContentIDRegistry: contentId expired');\\n\\t\\treturn expiredAt(account, contentId).sub(block.timestamp);\\n\\t}\\n\\n\\tfunction isExpired(address account, string memory contentId) public view returns(bool) {\\n\\t\\treturn expiredAt(account, contentId) < block.timestamp;\\n\\t}\\n\\n\\t/// @dev remove ipfs contentId\\n\\t/// @param contentIds array of ipfs contentIds\\n\\tfunction removeMult(string[] memory contentIds) external {\\n\\t\\tfor (uint256 i = 0; i < contentIds.length; i++) {\\n\\t\\t\\t_remove(msg.sender, contentIds[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev remove ipfs contentId\\n\\t/// @param contentId ipfs contentId id\\n\\tfunction remove(string memory contentId) external{\\n\\t\\t_remove(msg.sender, contentId);\\n\\t}\\n\\n\\tfunction _remove(\\n\\t\\taddress account,\\n\\t\\tstring memory contentId\\n\\t) internal {\\n\\t\\trequire(exists(account, contentId), 'ContentIDRegistry: nonexistent contentId');\\n\\t\\tdelete metas[account][contentId];\\n\\t\\temit Remove(account, contentId);\\n\\t}\\n\\n\\tfunction getValue(IERC20 token, uint256 size, uint256 expiration) public view returns(uint256 value) {\\n\\t\\trequire(tokenExists(token), 'ContentIDRegistry: nonexistent token');\\n\\t\\tvalue = priceAdaptor.getValue(tokens[token], size, expiration);\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x3766ceedf93eff541f935278fa1e9a2809b49d9538b084f5e149178db62261d9\",\"license\":\"GPL-3.0-only\"},\"contracts/PayTokens.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.4;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\nimport './interfaces/IERC20.sol';\\n\\n/// @author Alexandas\\n/// @dev pay tokens contract\\ncontract PayTokens is OwnableUpgradeable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\t// token -> decimals\\n\\tmapping(IERC20 => uint8) public tokens;\\n\\n\\t/// @dev emit when pay token added\\n\\t/// @param token token address\\n\\t/// @param decimals token decimals\\n\\tevent AddToken(IERC20 token, uint8 decimals);\\n\\n\\t/// @dev emit when pay token removed\\n\\t/// @param token token address\\n\\tevent RemoveToken(IERC20 token);\\n\\n    constructor() initializer {}\\n\\n\\tfunction __Init_Pay_Token(address admin, IERC20 token) internal onlyInitializing {\\n\\t\\t_transferOwnership(admin);\\n\\t\\t_addToken(token);\\n\\t}\\n\\n\\tfunction addToken(IERC20 token) external onlyOwner {\\n\\t\\t_addToken(token);\\n\\t}\\n\\n\\tfunction removeToken(IERC20 token) external onlyOwner {\\n\\t\\t_removeToken(token);\\n\\t}\\n\\n\\tfunction _addToken(IERC20 token) internal {\\n\\t\\trequire(!tokenExists(token), 'PayTokens: token exists');\\n\\t\\ttokens[token] = token.decimals();\\n\\t}\\n\\n\\tfunction _removeToken(IERC20 token) internal {\\n\\t\\trequire(tokenExists(token), 'PayTokens: nonexistent token');\\n\\t\\tdelete tokens[token];\\n\\t}\\n\\n\\tfunction tokenExists(IERC20 token) public view returns(bool) {\\n\\t\\treturn tokens[token] > 0;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x5efe5cc424d73490829c02760e1fbf9bdfc2877da0a71404721bfa7c60bb312b\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.4;\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\n\\ninterface IERC20 is IERC20Upgradeable {\\n\\tfunction decimals() external view returns(uint8);\\n}\",\"keccak256\":\"0x7b9c5533c121fa83eb22326a0585e80c448673f8870d6a34bb6331eb5661a860\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPriceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.4;\\n\\ninterface IPriceAdaptor {\\n\\n\\tevent PriceUpdated(uint256 _price);\\n\\n\\t/// @dev return cost of content with specific content size and expiration\\n\\t/// @param size content size\\n\\t/// @param expiration content expiration\\n\\t/// @return token value in decimals(30)\\n\\tfunction getValue(\\n\\t\\tuint256 size,\\n\\t\\tuint256 expiration\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev get amount resource with value at a specific block\\n\\t/// @param value token value in decimals(30)\\n\\t/// @param expiration content expiration\\n\\t/// @return size content size\\n\\tfunction getSizeWith(\\n\\t\\tuint256 value,\\n\\t\\tuint256 expiration\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev get amount resource with value at a specific block\\n\\t/// @param value token value in decimals(30)\\n\\t/// @param size content size\\n\\t/// @return content expiration\\n\\tfunction getExpirationWith(\\n\\t\\tuint256 value,\\n\\t\\tuint256 size\\n\\t) external view returns (uint256);\\n\\n\\tfunction getValue(uint8 tokenDecimals, uint256 size, uint256 expiration) external view returns(uint256 value);\\n\\n\\tfunction matchValueToToken(uint8 tokenDecimals, uint256 value) external pure returns(uint256);\\n\\n}\",\"keccak256\":\"0xa9986628b4ab288b5ebf39621e2f8fb214987ec3bde762f1c7dc6387bd1c95fd\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff1615808015620000335750600054600160ff909116105b806200006357506200005030620001c560201b6200091c1760201c565b15801562000063575060005460ff166001145b6200008b5760405162461bcd60e51b81526004016200008290620001d4565b60405180910390fd5b6000805460ff191660011790558015620000af576000805461ff0019166101001790555b8015620000ec576000805461ff0019169055604051600080516020620020c783398151915290620000e3906001906200024a565b60405180910390a15b50600054610100900460ff16158080156200010e5750600054600160ff909116105b806200013e57506200012b30620001c560201b6200091c1760201c565b1580156200013e575060005460ff166001145b6200015d5760405162461bcd60e51b81526004016200008290620001d4565b6000805460ff19166001179055801562000181576000805461ff0019166101001790555b8015620001be576000805461ff0019169055604051600080516020620020c783398151915290620001b5906001906200024a565b60405180910390a15b506200025a565b6001600160a01b03163b151590565b602080825281016200022781602e81527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160208201526d191e481a5b9a5d1a585b1a5e995960921b604082015260600190565b92915050565b600060ff821662000227565b62000244816200022d565b82525050565b6020810162000227828462000239565b611e5d806200026a6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063b33f78ca1161007c578063b33f78ca14610309578063c0c53b8b1461031c578063d48bfca71461032f578063d8999bdf14610342578063e486033914610355578063f2fde38b1461038557600080fd5b8063715018a61461024857806375190dd114610250578063775a4cb0146102aa57806380599e4b146102ca5780638da5cb5b146102dd578063b31bdec4146102f657600080fd5b8063298468a711610115578063298468a7146101d657806337e491c9146101e957806352bbb4f2146101fc5780635fa7b5841461020f578063669cf1c6146102225780636c6f07ad1461023557600080fd5b806305ee43f614610152578063064146181461016757806308b1cdcf1461017a57806309be8e1d146101a35780631266cc06146101b6575b600080fd5b6101656101603660046112bd565b610398565b005b610165610175366004611344565b6103dd565b61018d6101883660046113c3565b6103f1565b60405161019a919061141b565b60405180910390f35b61018d6101b136600461143d565b6104c3565b6066546101c9906001600160a01b031681565b60405161019a91906114a9565b6101656101e436600461152c565b610502565b61018d6101f736600461143d565b6105c2565b61016561020a3660046115d5565b61067b565b61016561021d366004611625565b61068d565b61018d61023036600461143d565b6106a1565b6101656102433660046115d5565b610704565b610165610711565b61029b61025e36600461143d565b6067602090815260009283526040909220815180830184018051928152908401929093019190912091528054600182015460029092015490919083565b60405161019a93929190611646565b6102bd6102b836600461143d565b610725565b60405161019a9190611676565b6101656102d8366004611684565b610767565b6033546001600160a01b031660405161019a91906116c8565b61018d61030436600461143d565b610771565b6102bd610317366004611625565b6107b1565b61016561032a3660046116d6565b6107d1565b61016561033d366004611625565b6108bf565b6102bd61035036600461143d565b6108d0565b610378610363366004611625565b60656020526000908152604090205460ff1681565b60405161019a9190611725565b610165610393366004611733565b6108e5565b60005b81518110156103d9576103c7338383815181106103ba576103ba611754565b602002602001015161092b565b806103d181611780565b91505061039b565b5050565b6103eb8433338686866109d4565b50505050565b60006103fc846107b1565b6104215760405162461bcd60e51b8152600401610418906117df565b60405180910390fd5b6066546001600160a01b0385811660009081526065602052604090819020549051639504c00360e01b81529190921691639504c0039161046b9160ff1690879087906004016117ef565b60206040518083038186803b15801561048357600080fd5b505afa158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb9190611808565b949350505050565b6001600160a01b03821660009081526067602052604080822090516104e9908490611877565b9081526040519081900360200190205490505b92915050565b81518351146105235760405162461bcd60e51b8152600401610418906118cc565b80518351146105445760405162461bcd60e51b8152600401610418906118cc565b60005b83518110156105bb576105a985333387858151811061056857610568611754565b602002602001015187868151811061058257610582611754565b602002602001015187878151811061059c5761059c611754565b60200260200101516109d4565b806105b381611780565b915050610547565b5050505050565b60006105ce8383610725565b6105ea5760405162461bcd60e51b815260040161041890611921565b6001600160a01b0383166000908152606760205260409081902090516106749190610616908590611877565b90815260200160405180910390206002015460676000866001600160a01b03166001600160a01b031681526020019081526020016000208460405161065b9190611877565b9081526040519081900360200190206001015490610bba565b9392505050565b6106888333338585610bc6565b505050565b610695610d75565b61069e81610d9f565b50565b60006106ad8383610725565b6106c95760405162461bcd60e51b815260040161041890611921565b6106d383836108d0565b156106f05760405162461bcd60e51b815260040161041890611972565b610674426106fe85856105c2565b90610de5565b6106888333338585610df1565b610719610d75565b6107236000610fb7565b565b6001600160a01b038216600090815260676020526040808220905182919061074e908590611877565b9081526040519081900360200190205411905092915050565b61069e338261092b565b6001600160a01b0382166000908152606760205260408082209051610797908490611877565b908152602001604051809103902060010154905092915050565b6001600160a01b031660009081526065602052604090205460ff16151590565b600054610100900460ff16158080156107f15750600054600160ff909116105b8061080b5750303b15801561080b575060005460ff166001145b6108275760405162461bcd60e51b8152600401610418906119cd565b6000805460ff19166001179055801561084a576000805461ff0019166101001790555b606680546001600160a01b0319166001600160a01b03851617905561086f8483611009565b80156103eb576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906108b1906001906119f1565b60405180910390a150505050565b6108c7610d75565b61069e8161103e565b6000426108dd84846105c2565b109392505050565b6108ed610d75565b6001600160a01b0381166109135760405162461bcd60e51b815260040161041890611a42565b61069e81610fb7565b6001600160a01b03163b151590565b6109358282610725565b6109515760405162461bcd60e51b815260040161041890611921565b6001600160a01b038216600090815260676020526040908190209051610978908390611877565b9081526040519081900360200181206000808255600182018190556002909101557fafb58637702ac59f4ec776bf00731c6db5de2befbf39779a2c5be4922201bb0e906109c89084908490611a84565b60405180910390a15050565b6109dd866107b1565b6109f95760405162461bcd60e51b8152600401610418906117df565b610a038484610725565b1580610a145750610a1484846108d0565b610a305760405162461bcd60e51b815260040161041890611afe565b6000821180610a3f5750600081115b610a5b5760405162461bcd60e51b815260040161041890611b4c565b6000610a688784846103f1565b6040516323b872dd60e01b81529091506001600160a01b038816906323b872dd90610a9b90899030908690600401611b5c565b602060405180830381600087803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed9190611b8a565b5060405180606001604052808481526020018381526020014281525060676000876001600160a01b03166001600160a01b0316815260200190815260200160002085604051610b3c9190611877565b90815260200160405180910390206000820151816000015560208201518160010155604082015181600201559050507f4471eb362c285c1ce8c27b53fa652555ee6b39467a3108f2024529852e38accf858585610b9989896105c2565b604051610ba99493929190611bab565b60405180910390a150505050505050565b60006106748284611bf0565b610bcf856107b1565b610beb5760405162461bcd60e51b8152600401610418906117df565b610bf58383610725565b610c115760405162461bcd60e51b815260040161041890611921565b610c1b83836108d0565b15610c385760405162461bcd60e51b815260040161041890611972565b60008111610c585760405162461bcd60e51b815260040161041890611c52565b6000610c6484846104c3565b90506000610c738783856103f1565b6040516323b872dd60e01b81529091506001600160a01b038816906323b872dd90610ca690899030908690600401611b5c565b602060405180830381600087803b158015610cc057600080fd5b505af1158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf89190611b8a565b50610d0d610d068686610771565b8490610bba565b6001600160a01b038616600090815260676020526040908190209051610d34908790611877565b908152604051908190036020019020600101557f4471eb362c285c1ce8c27b53fa652555ee6b39467a3108f2024529852e38accf858584610b9983836105c2565b6033546001600160a01b031633146107235760405162461bcd60e51b815260040161041890611c97565b610da8816107b1565b610dc45760405162461bcd60e51b815260040161041890611cdb565b6001600160a01b03166000908152606560205260409020805460ff19169055565b60006106748284611ceb565b610dfa856107b1565b610e165760405162461bcd60e51b8152600401610418906117df565b60008111610e365760405162461bcd60e51b815260040161041890611d46565b6000610e4284846106a1565b90506000610e518784846103f1565b6040516323b872dd60e01b81529091506001600160a01b038816906323b872dd90610e8490899030908690600401611b5c565b602060405180830381600087803b158015610e9e57600080fd5b505af1158015610eb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed69190611b8a565b506001600160a01b038516600090815260676020526040908190209051610f1a918591610f04908890611877565b9081526040519081900360200190205490610bba565b6001600160a01b038616600090815260676020526040908190209051610f41908790611877565b9081526040805160209281900383018120939093556001600160a01b0388166000908152606790925290207f4471eb362c285c1ce8c27b53fa652555ee6b39467a3108f2024529852e38accf9187918791610f9d908390611877565b90815260405190819003602001902054610b9989896105c2565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166110305760405162461bcd60e51b815260040161041890611d9e565b61103982610fb7565b6103d9815b611047816107b1565b156110645760405162461bcd60e51b815260040161041890611de2565b806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561109d57600080fd5b505afa1580156110b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d59190611e06565b6001600160a01b03919091166000908152606560205260409020805460ff191660ff909216919091179055565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561113e5761113e611102565b6040525050565b600061115060405190565b905061115c8282611118565b919050565b600067ffffffffffffffff82111561117b5761117b611102565b5060209081020190565b600067ffffffffffffffff82111561119f5761119f611102565b601f19601f83011660200192915050565b82818337506000910152565b60006111cf6111ca84611185565b611145565b9050828152602081018484840111156111ea576111ea600080fd5b6111f58482856111b0565b509392505050565b600082601f83011261121157611211600080fd5b81356104bb8482602086016111bc565b600061122f6111ca84611161565b8381529050602080820190840283018581111561124e5761124e600080fd5b835b8181101561128f57803567ffffffffffffffff81111561127257611272600080fd5b80860161127f89826111fd565b8552505060209283019201611250565b5050509392505050565b600082601f8301126112ad576112ad600080fd5b81356104bb848260208601611221565b6000602082840312156112d2576112d2600080fd5b813567ffffffffffffffff8111156112ec576112ec600080fd5b6104bb84828501611299565b60006001600160a01b0382166104fc565b60006104fc826112f8565b61131d81611309565b811461069e57600080fd5b80356104fc81611314565b8061131d565b80356104fc81611333565b6000806000806080858703121561135d5761135d600080fd5b60006113698787611328565b945050602085013567ffffffffffffffff81111561138957611389600080fd5b611395878288016111fd565b93505060406113a687828801611339565b92505060606113b787828801611339565b91505092959194509250565b6000806000606084860312156113db576113db600080fd5b60006113e78686611328565b93505060206113f886828701611339565b925050604061140986828701611339565b9150509250925092565b805b82525050565b602081016104fc8284611413565b61131d816112f8565b80356104fc81611429565b6000806040838503121561145357611453600080fd5b600061145f8585611432565b925050602083013567ffffffffffffffff81111561147f5761147f600080fd5b61148b858286016111fd565b9150509250929050565b60006104fc82611309565b61141581611495565b602081016104fc82846114a0565b60006114c56111ca84611161565b838152905060208082019084028301858111156114e4576114e4600080fd5b835b8181101561128f57806114f98882611339565b845250602092830192016114e6565b600082601f83011261151c5761151c600080fd5b81356104bb8482602086016114b7565b6000806000806080858703121561154557611545600080fd5b60006115518787611328565b945050602085013567ffffffffffffffff81111561157157611571600080fd5b61157d87828801611299565b935050604085013567ffffffffffffffff81111561159d5761159d600080fd5b6115a987828801611508565b925050606085013567ffffffffffffffff8111156115c9576115c9600080fd5b6113b787828801611508565b6000806000606084860312156115ed576115ed600080fd5b60006115f98686611328565b935050602084013567ffffffffffffffff81111561161957611619600080fd5b6113f8868287016111fd565b60006020828403121561163a5761163a600080fd5b60006104bb8484611328565b606081016116548286611413565b6116616020830185611413565b6104bb6040830184611413565b801515611415565b602081016104fc828461166e565b60006020828403121561169957611699600080fd5b813567ffffffffffffffff8111156116b3576116b3600080fd5b6104bb848285016111fd565b611415816112f8565b602081016104fc82846116bf565b6000806000606084860312156116ee576116ee600080fd5b60006116fa8686611432565b935050602061170b86828701611328565b925050604061140986828701611328565b60ff8116611415565b602081016104fc828461171c565b60006020828403121561174857611748600080fd5b60006104bb8484611432565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156117945761179461176a565b5060010190565b602481526000602082017f436f6e74656e74494452656769737472793a206e6f6e6578697374656e74207481526337b5b2b760e11b602082015291505b5060400190565b602080825281016104fc8161179b565b60608101611654828661171c565b80516104fc81611333565b60006020828403121561181d5761181d600080fd5b60006104bb84846117fd565b60005b8381101561184457818101518382015260200161182c565b838111156103eb5750506000910152565b600061185f825190565b61186d818560208601611829565b9290920192915050565b60006106748284611855565b602c81526000602082017f436f6e74656e74494452656769737472793a20696e76616c696420706172616d81526b32ba32b9103632b733ba341760a11b602082015291506117d8565b602080825281016104fc81611883565b602881526000602082017f436f6e74656e74494452656769737472793a206e6f6e6578697374656e7420638152671bdb9d195b9d125960c21b602082015291506117d8565b602080825281016104fc816118dc565b602481526000602082017f436f6e74656e74494452656769737472793a20636f6e74656e744964206578708152631a5c995960e21b602082015291506117d8565b602080825281016104fc81611931565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291506117d8565b602080825281016104fc81611982565b600060ff82166104fc565b611415816119dd565b602081016104fc82846119e8565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015291506117d8565b602080825281016104fc816119ff565b6000611a5c825190565b808452602084019350611a73818560208601611829565b601f01601f19169290920192915050565b60408101611a9282856116bf565b81810360208301526104bb8184611a52565b603b81526000602082017f436f6e74656e74494452656769737472793a20636f6e74656e7449642065786981527f737473206f72206e6f6e6578706972656420636f6e74656e7449640000000000602082015291506117d8565b602080825281016104fc81611aa4565b602181526000602082017f436f6e74656e74494452656769737472793a20696e76616c696420706172616d8152607360f81b602082015291506117d8565b602080825281016104fc81611b0e565b60608101611b6a82866116bf565b61166160208301856116bf565b80151561131d565b80516104fc81611b77565b600060208284031215611b9f57611b9f600080fd5b60006104bb8484611b7f565b60808101611bb982876116bf565b8181036020830152611bcb8186611a52565b9050611bda6040830185611413565b611be76060830184611413565b95945050505050565b60008219821115611c0357611c0361176a565b500190565b602d81526000602082017f436f6e74656e74494452656769737472793a20696e76616c696420636f6e746581526c373a1032bc3834b930ba34b7b760991b602082015291506117d8565b602080825281016104fc81611c08565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b602080825281016104fc81611c62565b601c81526000602082017f506179546f6b656e733a206e6f6e6578697374656e7420746f6b656e0000000081529150611c90565b602080825281016104fc81611ca7565b600082821015611cfd57611cfd61176a565b500390565b602781526000602082017f436f6e74656e74494452656769737472793a20696e76616c696420636f6e74658152666e742073697a6560c81b602082015291506117d8565b602080825281016104fc81611d02565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b602082015291506117d8565b602080825281016104fc81611d56565b601781526000602082017f506179546f6b656e733a20746f6b656e2065786973747300000000000000000081529150611c90565b602080825281016104fc81611dae565b60ff811661131d565b80516104fc81611df2565b600060208284031215611e1b57611e1b600080fd5b60006104bb8484611dfb56fea26469706673582212204fc98b2af23c8c4c6e20d600c5a3b23e71987e9c84c727461a3cf7c3a9f0cdff64736f6c634300080900337f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063b33f78ca1161007c578063b33f78ca14610309578063c0c53b8b1461031c578063d48bfca71461032f578063d8999bdf14610342578063e486033914610355578063f2fde38b1461038557600080fd5b8063715018a61461024857806375190dd114610250578063775a4cb0146102aa57806380599e4b146102ca5780638da5cb5b146102dd578063b31bdec4146102f657600080fd5b8063298468a711610115578063298468a7146101d657806337e491c9146101e957806352bbb4f2146101fc5780635fa7b5841461020f578063669cf1c6146102225780636c6f07ad1461023557600080fd5b806305ee43f614610152578063064146181461016757806308b1cdcf1461017a57806309be8e1d146101a35780631266cc06146101b6575b600080fd5b6101656101603660046112bd565b610398565b005b610165610175366004611344565b6103dd565b61018d6101883660046113c3565b6103f1565b60405161019a919061141b565b60405180910390f35b61018d6101b136600461143d565b6104c3565b6066546101c9906001600160a01b031681565b60405161019a91906114a9565b6101656101e436600461152c565b610502565b61018d6101f736600461143d565b6105c2565b61016561020a3660046115d5565b61067b565b61016561021d366004611625565b61068d565b61018d61023036600461143d565b6106a1565b6101656102433660046115d5565b610704565b610165610711565b61029b61025e36600461143d565b6067602090815260009283526040909220815180830184018051928152908401929093019190912091528054600182015460029092015490919083565b60405161019a93929190611646565b6102bd6102b836600461143d565b610725565b60405161019a9190611676565b6101656102d8366004611684565b610767565b6033546001600160a01b031660405161019a91906116c8565b61018d61030436600461143d565b610771565b6102bd610317366004611625565b6107b1565b61016561032a3660046116d6565b6107d1565b61016561033d366004611625565b6108bf565b6102bd61035036600461143d565b6108d0565b610378610363366004611625565b60656020526000908152604090205460ff1681565b60405161019a9190611725565b610165610393366004611733565b6108e5565b60005b81518110156103d9576103c7338383815181106103ba576103ba611754565b602002602001015161092b565b806103d181611780565b91505061039b565b5050565b6103eb8433338686866109d4565b50505050565b60006103fc846107b1565b6104215760405162461bcd60e51b8152600401610418906117df565b60405180910390fd5b6066546001600160a01b0385811660009081526065602052604090819020549051639504c00360e01b81529190921691639504c0039161046b9160ff1690879087906004016117ef565b60206040518083038186803b15801561048357600080fd5b505afa158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb9190611808565b949350505050565b6001600160a01b03821660009081526067602052604080822090516104e9908490611877565b9081526040519081900360200190205490505b92915050565b81518351146105235760405162461bcd60e51b8152600401610418906118cc565b80518351146105445760405162461bcd60e51b8152600401610418906118cc565b60005b83518110156105bb576105a985333387858151811061056857610568611754565b602002602001015187868151811061058257610582611754565b602002602001015187878151811061059c5761059c611754565b60200260200101516109d4565b806105b381611780565b915050610547565b5050505050565b60006105ce8383610725565b6105ea5760405162461bcd60e51b815260040161041890611921565b6001600160a01b0383166000908152606760205260409081902090516106749190610616908590611877565b90815260200160405180910390206002015460676000866001600160a01b03166001600160a01b031681526020019081526020016000208460405161065b9190611877565b9081526040519081900360200190206001015490610bba565b9392505050565b6106888333338585610bc6565b505050565b610695610d75565b61069e81610d9f565b50565b60006106ad8383610725565b6106c95760405162461bcd60e51b815260040161041890611921565b6106d383836108d0565b156106f05760405162461bcd60e51b815260040161041890611972565b610674426106fe85856105c2565b90610de5565b6106888333338585610df1565b610719610d75565b6107236000610fb7565b565b6001600160a01b038216600090815260676020526040808220905182919061074e908590611877565b9081526040519081900360200190205411905092915050565b61069e338261092b565b6001600160a01b0382166000908152606760205260408082209051610797908490611877565b908152602001604051809103902060010154905092915050565b6001600160a01b031660009081526065602052604090205460ff16151590565b600054610100900460ff16158080156107f15750600054600160ff909116105b8061080b5750303b15801561080b575060005460ff166001145b6108275760405162461bcd60e51b8152600401610418906119cd565b6000805460ff19166001179055801561084a576000805461ff0019166101001790555b606680546001600160a01b0319166001600160a01b03851617905561086f8483611009565b80156103eb576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906108b1906001906119f1565b60405180910390a150505050565b6108c7610d75565b61069e8161103e565b6000426108dd84846105c2565b109392505050565b6108ed610d75565b6001600160a01b0381166109135760405162461bcd60e51b815260040161041890611a42565b61069e81610fb7565b6001600160a01b03163b151590565b6109358282610725565b6109515760405162461bcd60e51b815260040161041890611921565b6001600160a01b038216600090815260676020526040908190209051610978908390611877565b9081526040519081900360200181206000808255600182018190556002909101557fafb58637702ac59f4ec776bf00731c6db5de2befbf39779a2c5be4922201bb0e906109c89084908490611a84565b60405180910390a15050565b6109dd866107b1565b6109f95760405162461bcd60e51b8152600401610418906117df565b610a038484610725565b1580610a145750610a1484846108d0565b610a305760405162461bcd60e51b815260040161041890611afe565b6000821180610a3f5750600081115b610a5b5760405162461bcd60e51b815260040161041890611b4c565b6000610a688784846103f1565b6040516323b872dd60e01b81529091506001600160a01b038816906323b872dd90610a9b90899030908690600401611b5c565b602060405180830381600087803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed9190611b8a565b5060405180606001604052808481526020018381526020014281525060676000876001600160a01b03166001600160a01b0316815260200190815260200160002085604051610b3c9190611877565b90815260200160405180910390206000820151816000015560208201518160010155604082015181600201559050507f4471eb362c285c1ce8c27b53fa652555ee6b39467a3108f2024529852e38accf858585610b9989896105c2565b604051610ba99493929190611bab565b60405180910390a150505050505050565b60006106748284611bf0565b610bcf856107b1565b610beb5760405162461bcd60e51b8152600401610418906117df565b610bf58383610725565b610c115760405162461bcd60e51b815260040161041890611921565b610c1b83836108d0565b15610c385760405162461bcd60e51b815260040161041890611972565b60008111610c585760405162461bcd60e51b815260040161041890611c52565b6000610c6484846104c3565b90506000610c738783856103f1565b6040516323b872dd60e01b81529091506001600160a01b038816906323b872dd90610ca690899030908690600401611b5c565b602060405180830381600087803b158015610cc057600080fd5b505af1158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf89190611b8a565b50610d0d610d068686610771565b8490610bba565b6001600160a01b038616600090815260676020526040908190209051610d34908790611877565b908152604051908190036020019020600101557f4471eb362c285c1ce8c27b53fa652555ee6b39467a3108f2024529852e38accf858584610b9983836105c2565b6033546001600160a01b031633146107235760405162461bcd60e51b815260040161041890611c97565b610da8816107b1565b610dc45760405162461bcd60e51b815260040161041890611cdb565b6001600160a01b03166000908152606560205260409020805460ff19169055565b60006106748284611ceb565b610dfa856107b1565b610e165760405162461bcd60e51b8152600401610418906117df565b60008111610e365760405162461bcd60e51b815260040161041890611d46565b6000610e4284846106a1565b90506000610e518784846103f1565b6040516323b872dd60e01b81529091506001600160a01b038816906323b872dd90610e8490899030908690600401611b5c565b602060405180830381600087803b158015610e9e57600080fd5b505af1158015610eb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed69190611b8a565b506001600160a01b038516600090815260676020526040908190209051610f1a918591610f04908890611877565b9081526040519081900360200190205490610bba565b6001600160a01b038616600090815260676020526040908190209051610f41908790611877565b9081526040805160209281900383018120939093556001600160a01b0388166000908152606790925290207f4471eb362c285c1ce8c27b53fa652555ee6b39467a3108f2024529852e38accf9187918791610f9d908390611877565b90815260405190819003602001902054610b9989896105c2565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166110305760405162461bcd60e51b815260040161041890611d9e565b61103982610fb7565b6103d9815b611047816107b1565b156110645760405162461bcd60e51b815260040161041890611de2565b806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561109d57600080fd5b505afa1580156110b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d59190611e06565b6001600160a01b03919091166000908152606560205260409020805460ff191660ff909216919091179055565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561113e5761113e611102565b6040525050565b600061115060405190565b905061115c8282611118565b919050565b600067ffffffffffffffff82111561117b5761117b611102565b5060209081020190565b600067ffffffffffffffff82111561119f5761119f611102565b601f19601f83011660200192915050565b82818337506000910152565b60006111cf6111ca84611185565b611145565b9050828152602081018484840111156111ea576111ea600080fd5b6111f58482856111b0565b509392505050565b600082601f83011261121157611211600080fd5b81356104bb8482602086016111bc565b600061122f6111ca84611161565b8381529050602080820190840283018581111561124e5761124e600080fd5b835b8181101561128f57803567ffffffffffffffff81111561127257611272600080fd5b80860161127f89826111fd565b8552505060209283019201611250565b5050509392505050565b600082601f8301126112ad576112ad600080fd5b81356104bb848260208601611221565b6000602082840312156112d2576112d2600080fd5b813567ffffffffffffffff8111156112ec576112ec600080fd5b6104bb84828501611299565b60006001600160a01b0382166104fc565b60006104fc826112f8565b61131d81611309565b811461069e57600080fd5b80356104fc81611314565b8061131d565b80356104fc81611333565b6000806000806080858703121561135d5761135d600080fd5b60006113698787611328565b945050602085013567ffffffffffffffff81111561138957611389600080fd5b611395878288016111fd565b93505060406113a687828801611339565b92505060606113b787828801611339565b91505092959194509250565b6000806000606084860312156113db576113db600080fd5b60006113e78686611328565b93505060206113f886828701611339565b925050604061140986828701611339565b9150509250925092565b805b82525050565b602081016104fc8284611413565b61131d816112f8565b80356104fc81611429565b6000806040838503121561145357611453600080fd5b600061145f8585611432565b925050602083013567ffffffffffffffff81111561147f5761147f600080fd5b61148b858286016111fd565b9150509250929050565b60006104fc82611309565b61141581611495565b602081016104fc82846114a0565b60006114c56111ca84611161565b838152905060208082019084028301858111156114e4576114e4600080fd5b835b8181101561128f57806114f98882611339565b845250602092830192016114e6565b600082601f83011261151c5761151c600080fd5b81356104bb8482602086016114b7565b6000806000806080858703121561154557611545600080fd5b60006115518787611328565b945050602085013567ffffffffffffffff81111561157157611571600080fd5b61157d87828801611299565b935050604085013567ffffffffffffffff81111561159d5761159d600080fd5b6115a987828801611508565b925050606085013567ffffffffffffffff8111156115c9576115c9600080fd5b6113b787828801611508565b6000806000606084860312156115ed576115ed600080fd5b60006115f98686611328565b935050602084013567ffffffffffffffff81111561161957611619600080fd5b6113f8868287016111fd565b60006020828403121561163a5761163a600080fd5b60006104bb8484611328565b606081016116548286611413565b6116616020830185611413565b6104bb6040830184611413565b801515611415565b602081016104fc828461166e565b60006020828403121561169957611699600080fd5b813567ffffffffffffffff8111156116b3576116b3600080fd5b6104bb848285016111fd565b611415816112f8565b602081016104fc82846116bf565b6000806000606084860312156116ee576116ee600080fd5b60006116fa8686611432565b935050602061170b86828701611328565b925050604061140986828701611328565b60ff8116611415565b602081016104fc828461171c565b60006020828403121561174857611748600080fd5b60006104bb8484611432565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156117945761179461176a565b5060010190565b602481526000602082017f436f6e74656e74494452656769737472793a206e6f6e6578697374656e74207481526337b5b2b760e11b602082015291505b5060400190565b602080825281016104fc8161179b565b60608101611654828661171c565b80516104fc81611333565b60006020828403121561181d5761181d600080fd5b60006104bb84846117fd565b60005b8381101561184457818101518382015260200161182c565b838111156103eb5750506000910152565b600061185f825190565b61186d818560208601611829565b9290920192915050565b60006106748284611855565b602c81526000602082017f436f6e74656e74494452656769737472793a20696e76616c696420706172616d81526b32ba32b9103632b733ba341760a11b602082015291506117d8565b602080825281016104fc81611883565b602881526000602082017f436f6e74656e74494452656769737472793a206e6f6e6578697374656e7420638152671bdb9d195b9d125960c21b602082015291506117d8565b602080825281016104fc816118dc565b602481526000602082017f436f6e74656e74494452656769737472793a20636f6e74656e744964206578708152631a5c995960e21b602082015291506117d8565b602080825281016104fc81611931565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291506117d8565b602080825281016104fc81611982565b600060ff82166104fc565b611415816119dd565b602081016104fc82846119e8565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015291506117d8565b602080825281016104fc816119ff565b6000611a5c825190565b808452602084019350611a73818560208601611829565b601f01601f19169290920192915050565b60408101611a9282856116bf565b81810360208301526104bb8184611a52565b603b81526000602082017f436f6e74656e74494452656769737472793a20636f6e74656e7449642065786981527f737473206f72206e6f6e6578706972656420636f6e74656e7449640000000000602082015291506117d8565b602080825281016104fc81611aa4565b602181526000602082017f436f6e74656e74494452656769737472793a20696e76616c696420706172616d8152607360f81b602082015291506117d8565b602080825281016104fc81611b0e565b60608101611b6a82866116bf565b61166160208301856116bf565b80151561131d565b80516104fc81611b77565b600060208284031215611b9f57611b9f600080fd5b60006104bb8484611b7f565b60808101611bb982876116bf565b8181036020830152611bcb8186611a52565b9050611bda6040830185611413565b611be76060830184611413565b95945050505050565b60008219821115611c0357611c0361176a565b500190565b602d81526000602082017f436f6e74656e74494452656769737472793a20696e76616c696420636f6e746581526c373a1032bc3834b930ba34b7b760991b602082015291506117d8565b602080825281016104fc81611c08565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b602080825281016104fc81611c62565b601c81526000602082017f506179546f6b656e733a206e6f6e6578697374656e7420746f6b656e0000000081529150611c90565b602080825281016104fc81611ca7565b600082821015611cfd57611cfd61176a565b500390565b602781526000602082017f436f6e74656e74494452656769737472793a20696e76616c696420636f6e74658152666e742073697a6560c81b602082015291506117d8565b602080825281016104fc81611d02565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b602082015291506117d8565b602080825281016104fc81611d56565b601781526000602082017f506179546f6b656e733a20746f6b656e2065786973747300000000000000000081529150611c90565b602080825281016104fc81611dae565b60ff811661131d565b80516104fc81611df2565b600060208284031215611e1b57611e1b600080fd5b60006104bb8484611dfb56fea26469706673582212204fc98b2af23c8c4c6e20d600c5a3b23e71987e9c84c727461a3cf7c3a9f0cdff64736f6c63430008090033",
  "devdoc": {
    "author": "Alexandas",
    "details": "IPFS content id registry",
    "events": {
      "Remove(address,string)": {
        "details": "emit when ipfs contentId removed",
        "params": {
          "account": "user account",
          "contentId": "ipfs contentId"
        }
      },
      "Upset(address,string,uint256,uint256)": {
        "details": "emit when ipfs contentId inserted or updated",
        "params": {
          "account": "user account",
          "contentId": "ipfs contentId",
          "expiredAt": "ipfs contentId expiredAt",
          "size": "ipfs contentId size"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "expand(address,string,uint256)": {
        "details": "renew ipfs contentId",
        "params": {
          "contentId": "ipfs contentId",
          "size": "of ipfs contentId",
          "token": "ERC20 token"
        }
      },
      "initialize(address,address,address)": {
        "details": "proxy initialize function"
      },
      "insert(address,string,uint256,uint256)": {
        "details": "insert ipfs contentId",
        "params": {
          "contentId": "ipfs contentId",
          "expiration": "of ipfs contentId",
          "size": "ipfs contentId size",
          "token": "ERC20 token"
        }
      },
      "insertMult(address,string[],uint256[],uint256[])": {
        "details": "insert multiple ipfs contentId for accounts",
        "params": {
          "contentIds": "array of ipfs contentIds",
          "expirations": "array of ipfs contentId expirations",
          "sizes": "array of ipfs contentId size",
          "token": "ERC20 token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "remove(string)": {
        "details": "remove ipfs contentId",
        "params": {
          "contentId": "ipfs contentId id"
        }
      },
      "removeMult(string[])": {
        "details": "remove ipfs contentId",
        "params": {
          "contentIds": "array of ipfs contentIds"
        }
      },
      "renew(address,string,uint256)": {
        "details": "renew ipfs contentId",
        "params": {
          "contentId": "ipfs contentId",
          "expiration": "of ipfs contentId",
          "token": "ERC20 token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "metas": {
        "details": "ipfs contentId contentId meta"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 141,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 144,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 647,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1704,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "tokens",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_contract(IERC20)1838,t_uint8)"
      },
      {
        "astId": 981,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "priceAdaptor",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IPriceAdaptor)1895"
      },
      {
        "astId": 989,
        "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
        "label": "metas",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(ContentMeta)978_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1838": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceAdaptor)1895": {
        "encoding": "inplace",
        "label": "contract IPriceAdaptor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(ContentMeta)978_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => struct ContentIDRegistry.ContentMeta))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(ContentMeta)978_storage)"
      },
      "t_mapping(t_contract(IERC20)1838,t_uint8)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1838",
        "label": "mapping(contract IERC20 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_string_memory_ptr,t_struct(ContentMeta)978_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct ContentIDRegistry.ContentMeta)",
        "numberOfBytes": "32",
        "value": "t_struct(ContentMeta)978_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ContentMeta)978_storage": {
        "encoding": "inplace",
        "label": "struct ContentIDRegistry.ContentMeta",
        "members": [
          {
            "astId": 973,
            "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 975,
            "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
            "label": "expiration",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 977,
            "contract": "contracts/ContentIDRegistry.sol:ContentIDRegistry",
            "label": "createAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}