/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPriceAdaptorInterface extends ethers.utils.Interface {
  functions: {
    "getExpirationWith(uint256,uint256)": FunctionFragment;
    "getSizeWith(uint256,uint256)": FunctionFragment;
    "getValue(uint256,uint256)": FunctionFragment;
    "matchValueToToken(uint8,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getExpirationWith",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSizeWith",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "matchValueToToken",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getExpirationWith",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSizeWith",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchValueToToken",
    data: BytesLike
  ): Result;

  events: {
    "PriceUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
}

export type PriceUpdatedEvent = TypedEvent<[BigNumber] & { _price: BigNumber }>;

export class IPriceAdaptor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPriceAdaptorInterface;

  functions: {
    getExpirationWith(
      value: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSizeWith(
      value: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getValue(uint256,uint256)"(
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getValue(uint8,uint256,uint256)"(
      tokenDecimals: BigNumberish,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    matchValueToToken(
      tokenDecimals: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getExpirationWith(
    value: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSizeWith(
    value: BigNumberish,
    expiration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getValue(uint256,uint256)"(
    size: BigNumberish,
    expiration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getValue(uint8,uint256,uint256)"(
    tokenDecimals: BigNumberish,
    size: BigNumberish,
    expiration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  matchValueToToken(
    tokenDecimals: BigNumberish,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getExpirationWith(
      value: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSizeWith(
      value: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getValue(uint256,uint256)"(
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getValue(uint8,uint256,uint256)"(
      tokenDecimals: BigNumberish,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchValueToToken(
      tokenDecimals: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "PriceUpdated(uint256)"(
      _price?: null
    ): TypedEventFilter<[BigNumber], { _price: BigNumber }>;

    PriceUpdated(
      _price?: null
    ): TypedEventFilter<[BigNumber], { _price: BigNumber }>;
  };

  estimateGas: {
    getExpirationWith(
      value: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSizeWith(
      value: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getValue(uint256,uint256)"(
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getValue(uint8,uint256,uint256)"(
      tokenDecimals: BigNumberish,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchValueToToken(
      tokenDecimals: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getExpirationWith(
      value: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSizeWith(
      value: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getValue(uint256,uint256)"(
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getValue(uint8,uint256,uint256)"(
      tokenDecimals: BigNumberish,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchValueToToken(
      tokenDecimals: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
