/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ContentIDRegistryInterface extends ethers.utils.Interface {
  functions: {
    "exists(address,string)": FunctionFragment;
    "expiredAt(address,string)": FunctionFragment;
    "getExpiration(address,string)": FunctionFragment;
    "getSize(address,string)": FunctionFragment;
    "getUpdateAt(address,string)": FunctionFragment;
    "initialize(address,address,uint256)": FunctionFragment;
    "insert(address,string,uint256,uint256)": FunctionFragment;
    "insertMult(address,string[],uint256[],uint256[])": FunctionFragment;
    "isExpired(address,string)": FunctionFragment;
    "matchValueToDecimals(address,uint256)": FunctionFragment;
    "metas(address,string)": FunctionFragment;
    "priceAdaptor()": FunctionFragment;
    "remove(string)": FunctionFragment;
    "removeMult(string[])": FunctionFragment;
    "tokenDecimals(address)": FunctionFragment;
    "tokenExists(address)": FunctionFragment;
    "tokenLength()": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "updateExpiration(address,string,uint256)": FunctionFragment;
    "updateExpirationMult(address,string[],uint256[])": FunctionFragment;
    "updateSize(address,string,uint256)": FunctionFragment;
    "updateSizeMult(address,string[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "exists",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "expiredAt",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpiration",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdateAt",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insert",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insertMult",
    values: [string, string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isExpired",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "matchValueToDecimals",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "metas",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "priceAdaptor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "remove", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeMult",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDecimals",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tokenExists", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExpiration",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExpirationMult",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSizeMult",
    values: [string, string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiredAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUpdateAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "insert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "insertMult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isExpired", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchValueToDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceAdaptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeMult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExpirationMult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSizeMult",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "Remove(address,string)": EventFragment;
    "Upset(address,string,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Remove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upset"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type RemoveEvent = TypedEvent<
  [string, string] & { account: string; contentId: string }
>;

export type UpsetEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    account: string;
    contentId: string;
    size: BigNumber;
    expiration: BigNumber;
  }
>;

export class ContentIDRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ContentIDRegistryInterface;

  functions: {
    exists(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    expiredAt(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExpiration(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSize(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUpdateAt(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _priceAdaptor: string,
      token: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insert(
      token: string,
      contentId: string,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insertMult(
      token: string,
      contentIds: string[],
      sizes: BigNumberish[],
      expirations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isExpired(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    matchValueToDecimals(
      token: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    metas(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        size: BigNumber;
        expiration: BigNumber;
        updateAt: BigNumber;
      }
    >;

    priceAdaptor(overrides?: CallOverrides): Promise<[string]>;

    remove(
      contentId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMult(
      contentIds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenDecimals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenExists(token: string, overrides?: CallOverrides): Promise<[boolean]>;

    tokenLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    updateExpiration(
      token: string,
      contentId: string,
      extraExpiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateExpirationMult(
      token: string,
      contentIds: string[],
      extraExpirations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSize(
      token: string,
      contentId: string,
      extraSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSizeMult(
      token: string,
      contentIds: string[],
      extraSizes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  exists(
    account: string,
    contentId: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  expiredAt(
    account: string,
    contentId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExpiration(
    account: string,
    contentId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSize(
    account: string,
    contentId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUpdateAt(
    account: string,
    contentId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _priceAdaptor: string,
    token: string,
    decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insert(
    token: string,
    contentId: string,
    size: BigNumberish,
    expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insertMult(
    token: string,
    contentIds: string[],
    sizes: BigNumberish[],
    expirations: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isExpired(
    account: string,
    contentId: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  matchValueToDecimals(
    token: string,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  metas(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      size: BigNumber;
      expiration: BigNumber;
      updateAt: BigNumber;
    }
  >;

  priceAdaptor(overrides?: CallOverrides): Promise<string>;

  remove(
    contentId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMult(
    contentIds: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenDecimals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  tokenExists(token: string, overrides?: CallOverrides): Promise<boolean>;

  tokenLength(overrides?: CallOverrides): Promise<BigNumber>;

  tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  updateExpiration(
    token: string,
    contentId: string,
    extraExpiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateExpirationMult(
    token: string,
    contentIds: string[],
    extraExpirations: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSize(
    token: string,
    contentId: string,
    extraSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSizeMult(
    token: string,
    contentIds: string[],
    extraSizes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    exists(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    expiredAt(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpiration(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSize(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUpdateAt(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _priceAdaptor: string,
      token: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    insert(
      token: string,
      contentId: string,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    insertMult(
      token: string,
      contentIds: string[],
      sizes: BigNumberish[],
      expirations: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isExpired(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    matchValueToDecimals(
      token: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metas(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        size: BigNumber;
        expiration: BigNumber;
        updateAt: BigNumber;
      }
    >;

    priceAdaptor(overrides?: CallOverrides): Promise<string>;

    remove(contentId: string, overrides?: CallOverrides): Promise<void>;

    removeMult(contentIds: string[], overrides?: CallOverrides): Promise<void>;

    tokenDecimals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenExists(token: string, overrides?: CallOverrides): Promise<boolean>;

    tokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    updateExpiration(
      token: string,
      contentId: string,
      extraExpiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExpirationMult(
      token: string,
      contentIds: string[],
      extraExpirations: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateSize(
      token: string,
      contentId: string,
      extraSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSizeMult(
      token: string,
      contentIds: string[],
      extraSizes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "Remove(address,string)"(
      account?: null,
      contentId?: null
    ): TypedEventFilter<
      [string, string],
      { account: string; contentId: string }
    >;

    Remove(
      account?: null,
      contentId?: null
    ): TypedEventFilter<
      [string, string],
      { account: string; contentId: string }
    >;

    "Upset(address,string,uint256,uint256)"(
      account?: null,
      contentId?: null,
      size?: null,
      expiration?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        account: string;
        contentId: string;
        size: BigNumber;
        expiration: BigNumber;
      }
    >;

    Upset(
      account?: null,
      contentId?: null,
      size?: null,
      expiration?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        account: string;
        contentId: string;
        size: BigNumber;
        expiration: BigNumber;
      }
    >;
  };

  estimateGas: {
    exists(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiredAt(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpiration(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSize(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUpdateAt(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _priceAdaptor: string,
      token: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insert(
      token: string,
      contentId: string,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insertMult(
      token: string,
      contentIds: string[],
      sizes: BigNumberish[],
      expirations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isExpired(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchValueToDecimals(
      token: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metas(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceAdaptor(overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      contentId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMult(
      contentIds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenDecimals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenExists(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    updateExpiration(
      token: string,
      contentId: string,
      extraExpiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateExpirationMult(
      token: string,
      contentIds: string[],
      extraExpirations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSize(
      token: string,
      contentId: string,
      extraSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSizeMult(
      token: string,
      contentIds: string[],
      extraSizes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exists(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiredAt(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpiration(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSize(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUpdateAt(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _priceAdaptor: string,
      token: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insert(
      token: string,
      contentId: string,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insertMult(
      token: string,
      contentIds: string[],
      sizes: BigNumberish[],
      expirations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isExpired(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchValueToDecimals(
      token: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metas(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceAdaptor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remove(
      contentId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMult(
      contentIds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenDecimals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenExists(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateExpiration(
      token: string,
      contentId: string,
      extraExpiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateExpirationMult(
      token: string,
      contentIds: string[],
      extraExpirations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSize(
      token: string,
      contentId: string,
      extraSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSizeMult(
      token: string,
      contentIds: string[],
      extraSizes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
