/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ContentIDRegistryInterface extends ethers.utils.Interface {
  functions: {
    "addToken(address)": FunctionFragment;
    "exists(address,string)": FunctionFragment;
    "expiredAt(address,string)": FunctionFragment;
    "getExpiration(address,string)": FunctionFragment;
    "getSize(address,string)": FunctionFragment;
    "getValue(address,uint256,uint256)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "insert(address,string,uint256,uint256)": FunctionFragment;
    "insertMult(address,string[],uint256[],uint256[])": FunctionFragment;
    "isExpired(address,string)": FunctionFragment;
    "metas(address,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "priceAdaptor()": FunctionFragment;
    "remove(string)": FunctionFragment;
    "removeMult(string[])": FunctionFragment;
    "removeToken(address)": FunctionFragment;
    "renew(address,string,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokenExists(address)": FunctionFragment;
    "tokens(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "expiredAt",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpiration",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getValue",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "insert",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insertMult",
    values: [string, string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isExpired",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "metas",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceAdaptor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "remove", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeMult",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "removeToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renew",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenExists", values: [string]): string;
  encodeFunctionData(functionFragment: "tokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiredAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "insert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "insertMult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isExpired", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "metas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceAdaptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeMult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddToken(address,uint8)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Remove(address,string)": EventFragment;
    "RemoveToken(address)": EventFragment;
    "Upset(address,string,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Remove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upset"): EventFragment;
}

export type AddTokenEvent = TypedEvent<
  [string, number] & { token: string; decimals: number }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RemoveEvent = TypedEvent<
  [string, string] & { account: string; contentId: string }
>;

export type RemoveTokenEvent = TypedEvent<[string] & { token: string }>;

export type UpsetEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    account: string;
    contentId: string;
    size: BigNumber;
    expiredAt: BigNumber;
  }
>;

export class ContentIDRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ContentIDRegistryInterface;

  functions: {
    addToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exists(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    expiredAt(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExpiration(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSize(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getValue(
      token: string,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    initialize(
      admin: string,
      _priceAdaptor: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insert(
      token: string,
      contentId: string,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insertMult(
      token: string,
      contentIds: string[],
      sizes: BigNumberish[],
      expirations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isExpired(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    metas(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        size: BigNumber;
        expiration: BigNumber;
        createAt: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceAdaptor(overrides?: CallOverrides): Promise<[string]>;

    remove(
      contentId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMult(
      contentIds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renew(
      token: string,
      contentId: string,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenExists(token: string, overrides?: CallOverrides): Promise<[boolean]>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exists(
    account: string,
    contentId: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  expiredAt(
    account: string,
    contentId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExpiration(
    account: string,
    contentId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSize(
    account: string,
    contentId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValue(
    token: string,
    size: BigNumberish,
    expiration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    admin: string,
    _priceAdaptor: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insert(
    token: string,
    contentId: string,
    size: BigNumberish,
    expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insertMult(
    token: string,
    contentIds: string[],
    sizes: BigNumberish[],
    expirations: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isExpired(
    account: string,
    contentId: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  metas(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      size: BigNumber;
      expiration: BigNumber;
      createAt: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  priceAdaptor(overrides?: CallOverrides): Promise<string>;

  remove(
    contentId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMult(
    contentIds: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renew(
    token: string,
    contentId: string,
    expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenExists(token: string, overrides?: CallOverrides): Promise<boolean>;

  tokens(arg0: string, overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToken(token: string, overrides?: CallOverrides): Promise<void>;

    exists(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    expiredAt(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpiration(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSize(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValue(
      token: string,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      admin: string,
      _priceAdaptor: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    insert(
      token: string,
      contentId: string,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    insertMult(
      token: string,
      contentIds: string[],
      sizes: BigNumberish[],
      expirations: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isExpired(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    metas(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        size: BigNumber;
        expiration: BigNumber;
        createAt: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    priceAdaptor(overrides?: CallOverrides): Promise<string>;

    remove(contentId: string, overrides?: CallOverrides): Promise<void>;

    removeMult(contentIds: string[], overrides?: CallOverrides): Promise<void>;

    removeToken(token: string, overrides?: CallOverrides): Promise<void>;

    renew(
      token: string,
      contentId: string,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    tokenExists(token: string, overrides?: CallOverrides): Promise<boolean>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddToken(address,uint8)"(
      token?: null,
      decimals?: null
    ): TypedEventFilter<[string, number], { token: string; decimals: number }>;

    AddToken(
      token?: null,
      decimals?: null
    ): TypedEventFilter<[string, number], { token: string; decimals: number }>;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Remove(address,string)"(
      account?: null,
      contentId?: null
    ): TypedEventFilter<
      [string, string],
      { account: string; contentId: string }
    >;

    Remove(
      account?: null,
      contentId?: null
    ): TypedEventFilter<
      [string, string],
      { account: string; contentId: string }
    >;

    "RemoveToken(address)"(
      token?: null
    ): TypedEventFilter<[string], { token: string }>;

    RemoveToken(token?: null): TypedEventFilter<[string], { token: string }>;

    "Upset(address,string,uint256,uint256)"(
      account?: null,
      contentId?: null,
      size?: null,
      expiredAt?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        account: string;
        contentId: string;
        size: BigNumber;
        expiredAt: BigNumber;
      }
    >;

    Upset(
      account?: null,
      contentId?: null,
      size?: null,
      expiredAt?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        account: string;
        contentId: string;
        size: BigNumber;
        expiredAt: BigNumber;
      }
    >;
  };

  estimateGas: {
    addToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exists(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiredAt(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpiration(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSize(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValue(
      token: string,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      admin: string,
      _priceAdaptor: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insert(
      token: string,
      contentId: string,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insertMult(
      token: string,
      contentIds: string[],
      sizes: BigNumberish[],
      expirations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isExpired(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metas(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceAdaptor(overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      contentId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMult(
      contentIds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renew(
      token: string,
      contentId: string,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenExists(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exists(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiredAt(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpiration(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSize(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValue(
      token: string,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      admin: string,
      _priceAdaptor: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insert(
      token: string,
      contentId: string,
      size: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insertMult(
      token: string,
      contentIds: string[],
      sizes: BigNumberish[],
      expirations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isExpired(
      account: string,
      contentId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metas(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceAdaptor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remove(
      contentId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMult(
      contentIds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renew(
      token: string,
      contentId: string,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenExists(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
